{"ast":null,"code":"import _classCallCheck from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _defineProperty from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classPrivateFieldGet from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\n/**\n *  A Typed object allows a value to have its type explicitly\n *  specified.\n *\n *  For example, in Solidity, the value ``45`` could represent a\n *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent\n *  a ``bytes2`` or ``bytes``.\n *\n *  Since JavaScript has no meaningful way to explicitly inform any\n *  APIs which what the type is, this allows transparent interoperation\n *  with Soldity.\n *\n *  @_subsection: api/abi:Typed Values\n */\nimport { assertPrivate, defineProperties } from \"../utils/index.js\";\nvar _gaurd = {};\nfunction n(value, width) {\n  var signed = false;\n  if (width < 0) {\n    signed = true;\n    width *= -1;\n  }\n  // @TODO: Check range is valid for value\n  return new Typed(_gaurd, \"\".concat(signed ? \"\" : \"u\", \"int\").concat(width), value, {\n    signed: signed,\n    width: width\n  });\n}\nfunction b(value, size) {\n  // @TODO: Check range is valid for value\n  return new Typed(_gaurd, \"bytes\".concat(size ? size : \"\"), value, {\n    size: size\n  });\n}\nvar _typedSymbol = Symbol.for(\"_ethers_typed\");\n/**\n *  The **Typed** class to wrap values providing explicit type information.\n */\nvar _options = /*#__PURE__*/new WeakMap();\nexport var Typed = /*#__PURE__*/function () {\n  /**\n   *  @_ignore:\n   */\n  function Typed(gaurd, type, value, options) {\n    _classCallCheck(this, Typed);\n    /**\n     *  The type, as a Solidity-compatible type.\n     */\n    _defineProperty(this, \"type\", void 0);\n    /**\n     *  The actual value.\n     */\n    _defineProperty(this, \"value\", void 0);\n    _classPrivateFieldInitSpec(this, _options, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     *  @_ignore:\n     */\n    _defineProperty(this, \"_typedSymbol\", void 0);\n    if (options == null) {\n      options = null;\n    }\n    assertPrivate(_gaurd, gaurd, \"Typed\");\n    defineProperties(this, {\n      _typedSymbol: _typedSymbol,\n      type: type,\n      value: value\n    });\n    _classPrivateFieldSet(this, _options, options);\n    // Check the value is valid\n    this.format();\n  }\n  /**\n   *  Format the type as a Human-Readable type.\n   */\n  _createClass(Typed, [{\n    key: \"format\",\n    value: function format() {\n      if (this.type === \"array\") {\n        throw new Error(\"\");\n      } else if (this.type === \"dynamicArray\") {\n        throw new Error(\"\");\n      } else if (this.type === \"tuple\") {\n        return \"tuple(\".concat(this.value.map(function (v) {\n          return v.format();\n        }).join(\",\"), \")\");\n      }\n      return this.type;\n    }\n    /**\n     *  The default value returned by this type.\n     */\n  }, {\n    key: \"defaultValue\",\n    value: function defaultValue() {\n      return 0;\n    }\n    /**\n     *  The minimum value for numeric types.\n     */\n  }, {\n    key: \"minValue\",\n    value: function minValue() {\n      return 0;\n    }\n    /**\n     *  The maximum value for numeric types.\n     */\n  }, {\n    key: \"maxValue\",\n    value: function maxValue() {\n      return 0;\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].\n     */\n  }, {\n    key: \"isBigInt\",\n    value: function isBigInt() {\n      return !!this.type.match(/^u?int[0-9]+$/);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedData]].\n     */\n  }, {\n    key: \"isData\",\n    value: function isData() {\n      return this.type.startsWith(\"bytes\");\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedString]].\n     */\n  }, {\n    key: \"isString\",\n    value: function isString() {\n      return this.type === \"string\";\n    }\n    /**\n     *  Returns the tuple name, if this is a tuple. Throws otherwise.\n     */\n  }, {\n    key: \"tupleName\",\n    get: function get() {\n      if (this.type !== \"tuple\") {\n        throw TypeError(\"not a tuple\");\n      }\n      return _classPrivateFieldGet(this, _options);\n    }\n    // Returns the length of this type as an array\n    // - `null` indicates the length is unforced, it could be dynamic\n    // - `-1` indicates the length is dynamic\n    // - any other value indicates it is a static array and is its length\n    /**\n     *  Returns the length of the array type or ``-1`` if it is dynamic.\n     *\n     *  Throws if the type is not an array.\n     */\n  }, {\n    key: \"arrayLength\",\n    get: function get() {\n      if (this.type !== \"array\") {\n        throw TypeError(\"not an array\");\n      }\n      if (_classPrivateFieldGet(this, _options) === true) {\n        return -1;\n      }\n      if (_classPrivateFieldGet(this, _options) === false) {\n        return this.value.length;\n      }\n      return null;\n    }\n    /**\n     *  Returns a new **Typed** of %%type%% with the %%value%%.\n     */\n  }], [{\n    key: \"from\",\n    value: function from(type, value) {\n      return new Typed(_gaurd, type, value);\n    }\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */\n  }, {\n    key: \"uint8\",\n    value: function uint8(v) {\n      return n(v, 8);\n    }\n    /**\n     *  Return a new ``uint16`` type for %%v%%.\n     */\n  }, {\n    key: \"uint16\",\n    value: function uint16(v) {\n      return n(v, 16);\n    }\n    /**\n     *  Return a new ``uint24`` type for %%v%%.\n     */\n  }, {\n    key: \"uint24\",\n    value: function uint24(v) {\n      return n(v, 24);\n    }\n    /**\n     *  Return a new ``uint32`` type for %%v%%.\n     */\n  }, {\n    key: \"uint32\",\n    value: function uint32(v) {\n      return n(v, 32);\n    }\n    /**\n     *  Return a new ``uint40`` type for %%v%%.\n     */\n  }, {\n    key: \"uint40\",\n    value: function uint40(v) {\n      return n(v, 40);\n    }\n    /**\n     *  Return a new ``uint48`` type for %%v%%.\n     */\n  }, {\n    key: \"uint48\",\n    value: function uint48(v) {\n      return n(v, 48);\n    }\n    /**\n     *  Return a new ``uint56`` type for %%v%%.\n     */\n  }, {\n    key: \"uint56\",\n    value: function uint56(v) {\n      return n(v, 56);\n    }\n    /**\n     *  Return a new ``uint64`` type for %%v%%.\n     */\n  }, {\n    key: \"uint64\",\n    value: function uint64(v) {\n      return n(v, 64);\n    }\n    /**\n     *  Return a new ``uint72`` type for %%v%%.\n     */\n  }, {\n    key: \"uint72\",\n    value: function uint72(v) {\n      return n(v, 72);\n    }\n    /**\n     *  Return a new ``uint80`` type for %%v%%.\n     */\n  }, {\n    key: \"uint80\",\n    value: function uint80(v) {\n      return n(v, 80);\n    }\n    /**\n     *  Return a new ``uint88`` type for %%v%%.\n     */\n  }, {\n    key: \"uint88\",\n    value: function uint88(v) {\n      return n(v, 88);\n    }\n    /**\n     *  Return a new ``uint96`` type for %%v%%.\n     */\n  }, {\n    key: \"uint96\",\n    value: function uint96(v) {\n      return n(v, 96);\n    }\n    /**\n     *  Return a new ``uint104`` type for %%v%%.\n     */\n  }, {\n    key: \"uint104\",\n    value: function uint104(v) {\n      return n(v, 104);\n    }\n    /**\n     *  Return a new ``uint112`` type for %%v%%.\n     */\n  }, {\n    key: \"uint112\",\n    value: function uint112(v) {\n      return n(v, 112);\n    }\n    /**\n     *  Return a new ``uint120`` type for %%v%%.\n     */\n  }, {\n    key: \"uint120\",\n    value: function uint120(v) {\n      return n(v, 120);\n    }\n    /**\n     *  Return a new ``uint128`` type for %%v%%.\n     */\n  }, {\n    key: \"uint128\",\n    value: function uint128(v) {\n      return n(v, 128);\n    }\n    /**\n     *  Return a new ``uint136`` type for %%v%%.\n     */\n  }, {\n    key: \"uint136\",\n    value: function uint136(v) {\n      return n(v, 136);\n    }\n    /**\n     *  Return a new ``uint144`` type for %%v%%.\n     */\n  }, {\n    key: \"uint144\",\n    value: function uint144(v) {\n      return n(v, 144);\n    }\n    /**\n     *  Return a new ``uint152`` type for %%v%%.\n     */\n  }, {\n    key: \"uint152\",\n    value: function uint152(v) {\n      return n(v, 152);\n    }\n    /**\n     *  Return a new ``uint160`` type for %%v%%.\n     */\n  }, {\n    key: \"uint160\",\n    value: function uint160(v) {\n      return n(v, 160);\n    }\n    /**\n     *  Return a new ``uint168`` type for %%v%%.\n     */\n  }, {\n    key: \"uint168\",\n    value: function uint168(v) {\n      return n(v, 168);\n    }\n    /**\n     *  Return a new ``uint176`` type for %%v%%.\n     */\n  }, {\n    key: \"uint176\",\n    value: function uint176(v) {\n      return n(v, 176);\n    }\n    /**\n     *  Return a new ``uint184`` type for %%v%%.\n     */\n  }, {\n    key: \"uint184\",\n    value: function uint184(v) {\n      return n(v, 184);\n    }\n    /**\n     *  Return a new ``uint192`` type for %%v%%.\n     */\n  }, {\n    key: \"uint192\",\n    value: function uint192(v) {\n      return n(v, 192);\n    }\n    /**\n     *  Return a new ``uint200`` type for %%v%%.\n     */\n  }, {\n    key: \"uint200\",\n    value: function uint200(v) {\n      return n(v, 200);\n    }\n    /**\n     *  Return a new ``uint208`` type for %%v%%.\n     */\n  }, {\n    key: \"uint208\",\n    value: function uint208(v) {\n      return n(v, 208);\n    }\n    /**\n     *  Return a new ``uint216`` type for %%v%%.\n     */\n  }, {\n    key: \"uint216\",\n    value: function uint216(v) {\n      return n(v, 216);\n    }\n    /**\n     *  Return a new ``uint224`` type for %%v%%.\n     */\n  }, {\n    key: \"uint224\",\n    value: function uint224(v) {\n      return n(v, 224);\n    }\n    /**\n     *  Return a new ``uint232`` type for %%v%%.\n     */\n  }, {\n    key: \"uint232\",\n    value: function uint232(v) {\n      return n(v, 232);\n    }\n    /**\n     *  Return a new ``uint240`` type for %%v%%.\n     */\n  }, {\n    key: \"uint240\",\n    value: function uint240(v) {\n      return n(v, 240);\n    }\n    /**\n     *  Return a new ``uint248`` type for %%v%%.\n     */\n  }, {\n    key: \"uint248\",\n    value: function uint248(v) {\n      return n(v, 248);\n    }\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */\n  }, {\n    key: \"uint256\",\n    value: function uint256(v) {\n      return n(v, 256);\n    }\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */\n  }, {\n    key: \"uint\",\n    value: function uint(v) {\n      return n(v, 256);\n    }\n    /**\n     *  Return a new ``int8`` type for %%v%%.\n     */\n  }, {\n    key: \"int8\",\n    value: function int8(v) {\n      return n(v, -8);\n    }\n    /**\n     *  Return a new ``int16`` type for %%v%%.\n     */\n  }, {\n    key: \"int16\",\n    value: function int16(v) {\n      return n(v, -16);\n    }\n    /**\n     *  Return a new ``int24`` type for %%v%%.\n     */\n  }, {\n    key: \"int24\",\n    value: function int24(v) {\n      return n(v, -24);\n    }\n    /**\n     *  Return a new ``int32`` type for %%v%%.\n     */\n  }, {\n    key: \"int32\",\n    value: function int32(v) {\n      return n(v, -32);\n    }\n    /**\n     *  Return a new ``int40`` type for %%v%%.\n     */\n  }, {\n    key: \"int40\",\n    value: function int40(v) {\n      return n(v, -40);\n    }\n    /**\n     *  Return a new ``int48`` type for %%v%%.\n     */\n  }, {\n    key: \"int48\",\n    value: function int48(v) {\n      return n(v, -48);\n    }\n    /**\n     *  Return a new ``int56`` type for %%v%%.\n     */\n  }, {\n    key: \"int56\",\n    value: function int56(v) {\n      return n(v, -56);\n    }\n    /**\n     *  Return a new ``int64`` type for %%v%%.\n     */\n  }, {\n    key: \"int64\",\n    value: function int64(v) {\n      return n(v, -64);\n    }\n    /**\n     *  Return a new ``int72`` type for %%v%%.\n     */\n  }, {\n    key: \"int72\",\n    value: function int72(v) {\n      return n(v, -72);\n    }\n    /**\n     *  Return a new ``int80`` type for %%v%%.\n     */\n  }, {\n    key: \"int80\",\n    value: function int80(v) {\n      return n(v, -80);\n    }\n    /**\n     *  Return a new ``int88`` type for %%v%%.\n     */\n  }, {\n    key: \"int88\",\n    value: function int88(v) {\n      return n(v, -88);\n    }\n    /**\n     *  Return a new ``int96`` type for %%v%%.\n     */\n  }, {\n    key: \"int96\",\n    value: function int96(v) {\n      return n(v, -96);\n    }\n    /**\n     *  Return a new ``int104`` type for %%v%%.\n     */\n  }, {\n    key: \"int104\",\n    value: function int104(v) {\n      return n(v, -104);\n    }\n    /**\n     *  Return a new ``int112`` type for %%v%%.\n     */\n  }, {\n    key: \"int112\",\n    value: function int112(v) {\n      return n(v, -112);\n    }\n    /**\n     *  Return a new ``int120`` type for %%v%%.\n     */\n  }, {\n    key: \"int120\",\n    value: function int120(v) {\n      return n(v, -120);\n    }\n    /**\n     *  Return a new ``int128`` type for %%v%%.\n     */\n  }, {\n    key: \"int128\",\n    value: function int128(v) {\n      return n(v, -128);\n    }\n    /**\n     *  Return a new ``int136`` type for %%v%%.\n     */\n  }, {\n    key: \"int136\",\n    value: function int136(v) {\n      return n(v, -136);\n    }\n    /**\n     *  Return a new ``int144`` type for %%v%%.\n     */\n  }, {\n    key: \"int144\",\n    value: function int144(v) {\n      return n(v, -144);\n    }\n    /**\n     *  Return a new ``int52`` type for %%v%%.\n     */\n  }, {\n    key: \"int152\",\n    value: function int152(v) {\n      return n(v, -152);\n    }\n    /**\n     *  Return a new ``int160`` type for %%v%%.\n     */\n  }, {\n    key: \"int160\",\n    value: function int160(v) {\n      return n(v, -160);\n    }\n    /**\n     *  Return a new ``int168`` type for %%v%%.\n     */\n  }, {\n    key: \"int168\",\n    value: function int168(v) {\n      return n(v, -168);\n    }\n    /**\n     *  Return a new ``int176`` type for %%v%%.\n     */\n  }, {\n    key: \"int176\",\n    value: function int176(v) {\n      return n(v, -176);\n    }\n    /**\n     *  Return a new ``int184`` type for %%v%%.\n     */\n  }, {\n    key: \"int184\",\n    value: function int184(v) {\n      return n(v, -184);\n    }\n    /**\n     *  Return a new ``int92`` type for %%v%%.\n     */\n  }, {\n    key: \"int192\",\n    value: function int192(v) {\n      return n(v, -192);\n    }\n    /**\n     *  Return a new ``int200`` type for %%v%%.\n     */\n  }, {\n    key: \"int200\",\n    value: function int200(v) {\n      return n(v, -200);\n    }\n    /**\n     *  Return a new ``int208`` type for %%v%%.\n     */\n  }, {\n    key: \"int208\",\n    value: function int208(v) {\n      return n(v, -208);\n    }\n    /**\n     *  Return a new ``int216`` type for %%v%%.\n     */\n  }, {\n    key: \"int216\",\n    value: function int216(v) {\n      return n(v, -216);\n    }\n    /**\n     *  Return a new ``int224`` type for %%v%%.\n     */\n  }, {\n    key: \"int224\",\n    value: function int224(v) {\n      return n(v, -224);\n    }\n    /**\n     *  Return a new ``int232`` type for %%v%%.\n     */\n  }, {\n    key: \"int232\",\n    value: function int232(v) {\n      return n(v, -232);\n    }\n    /**\n     *  Return a new ``int240`` type for %%v%%.\n     */\n  }, {\n    key: \"int240\",\n    value: function int240(v) {\n      return n(v, -240);\n    }\n    /**\n     *  Return a new ``int248`` type for %%v%%.\n     */\n  }, {\n    key: \"int248\",\n    value: function int248(v) {\n      return n(v, -248);\n    }\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */\n  }, {\n    key: \"int256\",\n    value: function int256(v) {\n      return n(v, -256);\n    }\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */\n  }, {\n    key: \"int\",\n    value: function int(v) {\n      return n(v, -256);\n    }\n    /**\n     *  Return a new ``bytes1`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes1\",\n    value: function bytes1(v) {\n      return b(v, 1);\n    }\n    /**\n     *  Return a new ``bytes2`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes2\",\n    value: function bytes2(v) {\n      return b(v, 2);\n    }\n    /**\n     *  Return a new ``bytes3`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes3\",\n    value: function bytes3(v) {\n      return b(v, 3);\n    }\n    /**\n     *  Return a new ``bytes4`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes4\",\n    value: function bytes4(v) {\n      return b(v, 4);\n    }\n    /**\n     *  Return a new ``bytes5`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes5\",\n    value: function bytes5(v) {\n      return b(v, 5);\n    }\n    /**\n     *  Return a new ``bytes6`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes6\",\n    value: function bytes6(v) {\n      return b(v, 6);\n    }\n    /**\n     *  Return a new ``bytes7`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes7\",\n    value: function bytes7(v) {\n      return b(v, 7);\n    }\n    /**\n     *  Return a new ``bytes8`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes8\",\n    value: function bytes8(v) {\n      return b(v, 8);\n    }\n    /**\n     *  Return a new ``bytes9`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes9\",\n    value: function bytes9(v) {\n      return b(v, 9);\n    }\n    /**\n     *  Return a new ``bytes10`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes10\",\n    value: function bytes10(v) {\n      return b(v, 10);\n    }\n    /**\n     *  Return a new ``bytes11`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes11\",\n    value: function bytes11(v) {\n      return b(v, 11);\n    }\n    /**\n     *  Return a new ``bytes12`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes12\",\n    value: function bytes12(v) {\n      return b(v, 12);\n    }\n    /**\n     *  Return a new ``bytes13`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes13\",\n    value: function bytes13(v) {\n      return b(v, 13);\n    }\n    /**\n     *  Return a new ``bytes14`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes14\",\n    value: function bytes14(v) {\n      return b(v, 14);\n    }\n    /**\n     *  Return a new ``bytes15`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes15\",\n    value: function bytes15(v) {\n      return b(v, 15);\n    }\n    /**\n     *  Return a new ``bytes16`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes16\",\n    value: function bytes16(v) {\n      return b(v, 16);\n    }\n    /**\n     *  Return a new ``bytes17`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes17\",\n    value: function bytes17(v) {\n      return b(v, 17);\n    }\n    /**\n     *  Return a new ``bytes18`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes18\",\n    value: function bytes18(v) {\n      return b(v, 18);\n    }\n    /**\n     *  Return a new ``bytes19`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes19\",\n    value: function bytes19(v) {\n      return b(v, 19);\n    }\n    /**\n     *  Return a new ``bytes20`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes20\",\n    value: function bytes20(v) {\n      return b(v, 20);\n    }\n    /**\n     *  Return a new ``bytes21`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes21\",\n    value: function bytes21(v) {\n      return b(v, 21);\n    }\n    /**\n     *  Return a new ``bytes22`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes22\",\n    value: function bytes22(v) {\n      return b(v, 22);\n    }\n    /**\n     *  Return a new ``bytes23`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes23\",\n    value: function bytes23(v) {\n      return b(v, 23);\n    }\n    /**\n     *  Return a new ``bytes24`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes24\",\n    value: function bytes24(v) {\n      return b(v, 24);\n    }\n    /**\n     *  Return a new ``bytes25`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes25\",\n    value: function bytes25(v) {\n      return b(v, 25);\n    }\n    /**\n     *  Return a new ``bytes26`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes26\",\n    value: function bytes26(v) {\n      return b(v, 26);\n    }\n    /**\n     *  Return a new ``bytes27`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes27\",\n    value: function bytes27(v) {\n      return b(v, 27);\n    }\n    /**\n     *  Return a new ``bytes28`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes28\",\n    value: function bytes28(v) {\n      return b(v, 28);\n    }\n    /**\n     *  Return a new ``bytes29`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes29\",\n    value: function bytes29(v) {\n      return b(v, 29);\n    }\n    /**\n     *  Return a new ``bytes30`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes30\",\n    value: function bytes30(v) {\n      return b(v, 30);\n    }\n    /**\n     *  Return a new ``bytes31`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes31\",\n    value: function bytes31(v) {\n      return b(v, 31);\n    }\n    /**\n     *  Return a new ``bytes32`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes32\",\n    value: function bytes32(v) {\n      return b(v, 32);\n    }\n    /**\n     *  Return a new ``address`` type for %%v%%.\n     */\n  }, {\n    key: \"address\",\n    value: function address(v) {\n      return new Typed(_gaurd, \"address\", v);\n    }\n    /**\n     *  Return a new ``bool`` type for %%v%%.\n     */\n  }, {\n    key: \"bool\",\n    value: function bool(v) {\n      return new Typed(_gaurd, \"bool\", !!v);\n    }\n    /**\n     *  Return a new ``bytes`` type for %%v%%.\n     */\n  }, {\n    key: \"bytes\",\n    value: function bytes(v) {\n      return new Typed(_gaurd, \"bytes\", v);\n    }\n    /**\n     *  Return a new ``string`` type for %%v%%.\n     */\n  }, {\n    key: \"string\",\n    value: function string(v) {\n      return new Typed(_gaurd, \"string\", v);\n    }\n    /**\n     *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.\n     */\n  }, {\n    key: \"array\",\n    value: function array(v, dynamic) {\n      throw new Error(\"not implemented yet\");\n      return new Typed(_gaurd, \"array\", v, dynamic);\n    }\n    /**\n     *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.\n     */\n  }, {\n    key: \"tuple\",\n    value: function tuple(v, name) {\n      throw new Error(\"not implemented yet\");\n      return new Typed(_gaurd, \"tuple\", v, name);\n    }\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */\n  }, {\n    key: \"overrides\",\n    value: function overrides(v) {\n      return new Typed(_gaurd, \"overrides\", Object.assign({}, v));\n    }\n    /**\n     *  Returns true only if %%value%% is a [[Typed]] instance.\n     */\n  }, {\n    key: \"isTyped\",\n    value: function isTyped(value) {\n      return value && typeof value === \"object\" && \"_typedSymbol\" in value && value._typedSymbol === _typedSymbol;\n    }\n    /**\n     *  If the value is a [[Typed]] instance, validates the underlying value\n     *  and returns it, otherwise returns value directly.\n     *\n     *  This is useful for functions that with to accept either a [[Typed]]\n     *  object or values.\n     */\n  }, {\n    key: \"dereference\",\n    value: function dereference(value, type) {\n      if (Typed.isTyped(value)) {\n        if (value.type !== type) {\n          throw new Error(\"invalid type: expecetd \".concat(type, \", got \").concat(value.type));\n        }\n        return value.value;\n      }\n      return value;\n    }\n  }]);\n  return Typed;\n}();","map":{"version":3,"names":["assertPrivate","defineProperties","_gaurd","n","value","width","signed","Typed","concat","b","size","_typedSymbol","Symbol","for","_options","WeakMap","gaurd","type","options","_classCallCheck","_defineProperty","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","format","_createClass","key","Error","map","v","join","defaultValue","minValue","maxValue","isBigInt","match","isData","startsWith","isString","get","TypeError","_classPrivateFieldGet","length","from","uint8","uint16","uint24","uint32","uint40","uint48","uint56","uint64","uint72","uint80","uint88","uint96","uint104","uint112","uint120","uint128","uint136","uint144","uint152","uint160","uint168","uint176","uint184","uint192","uint200","uint208","uint216","uint224","uint232","uint240","uint248","uint256","uint","int8","int16","int24","int32","int40","int48","int56","int64","int72","int80","int88","int96","int104","int112","int120","int128","int136","int144","int152","int160","int168","int176","int184","int192","int200","int208","int216","int224","int232","int240","int248","int256","int","bytes1","bytes2","bytes3","bytes4","bytes5","bytes6","bytes7","bytes8","bytes9","bytes10","bytes11","bytes12","bytes13","bytes14","bytes15","bytes16","bytes17","bytes18","bytes19","bytes20","bytes21","bytes22","bytes23","bytes24","bytes25","bytes26","bytes27","bytes28","bytes29","bytes30","bytes31","bytes32","address","bool","bytes","string","array","dynamic","tuple","name","overrides","Object","assign","isTyped","dereference"],"sources":["C:\\Users\\prcue\\OneDrive\\Curso 4\\TFG GITT\\5. Desarrollo\\3. Frontend\\frontend_v3\\node_modules\\ethers\\src.ts\\abi\\typed.ts"],"sourcesContent":["/**\n *  A Typed object allows a value to have its type explicitly\n *  specified.\n *\n *  For example, in Solidity, the value ``45`` could represent a\n *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent\n *  a ``bytes2`` or ``bytes``.\n *\n *  Since JavaScript has no meaningful way to explicitly inform any\n *  APIs which what the type is, this allows transparent interoperation\n *  with Soldity.\n *\n *  @_subsection: api/abi:Typed Values\n */\n\nimport { assertPrivate, defineProperties } from \"../utils/index.js\";\n\nimport type { Addressable } from \"../address/index.js\";\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\n\nimport type { Result } from \"./coders/abstract-coder.js\";\n\nconst _gaurd = { };\n\nfunction n(value: BigNumberish, width: number): Typed {\n    let signed = false;\n    if (width < 0) {\n        signed = true;\n        width *= -1;\n    }\n\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, `${ signed ? \"\": \"u\" }int${ width }`, value, { signed, width });\n}\n\nfunction b(value: BytesLike, size?: number): Typed {\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, `bytes${ (size) ? size: \"\" }`, value, { size });\n}\n\n// @TODO: Remove this in v7, it was replaced by TypedBigInt\n/**\n *  @_ignore:\n */\nexport interface TypedNumber extends Typed {\n    value: number;\n    defaultValue(): number;\n    minValue(): number;\n    maxValue(): number;\n}\n\n/**\n *  A **Typed** that represents a numeric value.\n */\nexport interface TypedBigInt extends Typed {\n    /**\n     *  The value.\n     */\n    value: bigint;\n\n    /**\n     *  The default value for all numeric types is ``0``.\n     */\n    defaultValue(): bigint;\n\n    /**\n     *  The minimum value for this type, accounting for bit-width and signed-ness.\n     */\n    minValue(): bigint;\n\n    /**\n     *  The minimum value for this type, accounting for bit-width.\n     */\n    maxValue(): bigint;\n}\n\n/**\n *  A **Typed** that represents a binary sequence of data as bytes.\n */\nexport interface TypedData extends Typed {\n    /**\n     *  The value.\n     */\n    value: string;\n\n    /**\n     *  The default value for this type.\n     */\n    defaultValue(): string;\n}\n\n/**\n *  A **Typed** that represents a UTF-8 sequence of bytes.\n */\nexport interface TypedString extends Typed {\n    /**\n     *  The value.\n     */\n    value: string;\n\n    /**\n     *  The default value for the string type is the empty string (i.e. ``\"\"``).\n     */\n    defaultValue(): string;\n}\n\nconst _typedSymbol = Symbol.for(\"_ethers_typed\");\n\n/**\n *  The **Typed** class to wrap values providing explicit type information.\n */\nexport class Typed {\n\n    /**\n     *  The type, as a Solidity-compatible type.\n     */\n    readonly type!: string;\n\n    /**\n     *  The actual value.\n     */\n    readonly value!: any;\n\n    readonly #options: any;\n\n    /**\n     *  @_ignore:\n     */\n    readonly _typedSymbol!: Symbol;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(gaurd: any, type: string, value: any, options?: any) {\n        if (options == null) { options = null; }\n        assertPrivate(_gaurd, gaurd, \"Typed\");\n        defineProperties<Typed>(this, { _typedSymbol, type, value });\n        this.#options = options;\n\n        // Check the value is valid\n        this.format();\n    }\n\n    /**\n     *  Format the type as a Human-Readable type.\n     */\n    format(): string {\n        if (this.type === \"array\") {\n            throw new Error(\"\");\n        } else if (this.type === \"dynamicArray\") {\n            throw new Error(\"\");\n        } else if (this.type === \"tuple\") {\n            return `tuple(${ this.value.map((v: Typed) => v.format()).join(\",\") })`\n        }\n\n        return this.type;\n    }\n\n    /**\n     *  The default value returned by this type.\n     */\n    defaultValue(): string | number | bigint | Result {\n        return 0;\n    }\n\n    /**\n     *  The minimum value for numeric types.\n     */\n    minValue(): string | number | bigint {\n        return 0;\n    }\n\n    /**\n     *  The maximum value for numeric types.\n     */\n    maxValue(): string | number | bigint {\n        return 0;\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].\n     */\n    isBigInt(): this is TypedBigInt {\n        return !!(this.type.match(/^u?int[0-9]+$/));\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedData]].\n     */\n    isData(): this is TypedData {\n        return this.type.startsWith(\"bytes\");\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedString]].\n     */\n    isString(): this is TypedString {\n        return (this.type === \"string\");\n    }\n\n    /**\n     *  Returns the tuple name, if this is a tuple. Throws otherwise.\n     */\n    get tupleName(): null | string {\n        if (this.type !== \"tuple\") { throw TypeError(\"not a tuple\"); }\n        return this.#options;\n    }\n\n    // Returns the length of this type as an array\n    // - `null` indicates the length is unforced, it could be dynamic\n    // - `-1` indicates the length is dynamic\n    // - any other value indicates it is a static array and is its length\n\n    /**\n     *  Returns the length of the array type or ``-1`` if it is dynamic.\n     *\n     *  Throws if the type is not an array.\n     */\n    get arrayLength(): null | number {\n        if (this.type !== \"array\") { throw TypeError(\"not an array\"); }\n        if (this.#options === true) { return -1; }\n        if (this.#options === false) { return (<Array<any>>(this.value)).length; }\n        return null;\n    }\n\n    /**\n     *  Returns a new **Typed** of %%type%% with the %%value%%.\n     */\n    static from(type: string, value: any): Typed {\n        return new Typed(_gaurd, type, value);\n    }\n\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */\n    static uint8(v: BigNumberish): Typed { return n(v, 8); }\n\n    /**\n     *  Return a new ``uint16`` type for %%v%%.\n     */\n    static uint16(v: BigNumberish): Typed { return n(v, 16); }\n\n    /**\n     *  Return a new ``uint24`` type for %%v%%.\n     */\n    static uint24(v: BigNumberish): Typed { return n(v, 24); }\n\n    /**\n     *  Return a new ``uint32`` type for %%v%%.\n     */\n    static uint32(v: BigNumberish): Typed { return n(v, 32); }\n\n    /**\n     *  Return a new ``uint40`` type for %%v%%.\n     */\n    static uint40(v: BigNumberish): Typed { return n(v, 40); }\n\n    /**\n     *  Return a new ``uint48`` type for %%v%%.\n     */\n    static uint48(v: BigNumberish): Typed { return n(v, 48); }\n\n    /**\n     *  Return a new ``uint56`` type for %%v%%.\n     */\n    static uint56(v: BigNumberish): Typed { return n(v, 56); }\n\n    /**\n     *  Return a new ``uint64`` type for %%v%%.\n     */\n    static uint64(v: BigNumberish): Typed { return n(v, 64); }\n\n    /**\n     *  Return a new ``uint72`` type for %%v%%.\n     */\n    static uint72(v: BigNumberish): Typed { return n(v, 72); }\n\n    /**\n     *  Return a new ``uint80`` type for %%v%%.\n     */\n    static uint80(v: BigNumberish): Typed { return n(v, 80); }\n\n    /**\n     *  Return a new ``uint88`` type for %%v%%.\n     */\n    static uint88(v: BigNumberish): Typed { return n(v, 88); }\n\n    /**\n     *  Return a new ``uint96`` type for %%v%%.\n     */\n    static uint96(v: BigNumberish): Typed { return n(v, 96); }\n\n    /**\n     *  Return a new ``uint104`` type for %%v%%.\n     */\n    static uint104(v: BigNumberish): Typed { return n(v, 104); }\n\n    /**\n     *  Return a new ``uint112`` type for %%v%%.\n     */\n    static uint112(v: BigNumberish): Typed { return n(v, 112); }\n\n    /**\n     *  Return a new ``uint120`` type for %%v%%.\n     */\n    static uint120(v: BigNumberish): Typed { return n(v, 120); }\n\n    /**\n     *  Return a new ``uint128`` type for %%v%%.\n     */\n    static uint128(v: BigNumberish): Typed { return n(v, 128); }\n\n    /**\n     *  Return a new ``uint136`` type for %%v%%.\n     */\n    static uint136(v: BigNumberish): Typed { return n(v, 136); }\n\n    /**\n     *  Return a new ``uint144`` type for %%v%%.\n     */\n    static uint144(v: BigNumberish): Typed { return n(v, 144); }\n\n    /**\n     *  Return a new ``uint152`` type for %%v%%.\n     */\n    static uint152(v: BigNumberish): Typed { return n(v, 152); }\n\n    /**\n     *  Return a new ``uint160`` type for %%v%%.\n     */\n    static uint160(v: BigNumberish): Typed { return n(v, 160); }\n\n    /**\n     *  Return a new ``uint168`` type for %%v%%.\n     */\n    static uint168(v: BigNumberish): Typed { return n(v, 168); }\n\n    /**\n     *  Return a new ``uint176`` type for %%v%%.\n     */\n    static uint176(v: BigNumberish): Typed { return n(v, 176); }\n\n    /**\n     *  Return a new ``uint184`` type for %%v%%.\n     */\n    static uint184(v: BigNumberish): Typed { return n(v, 184); }\n\n    /**\n     *  Return a new ``uint192`` type for %%v%%.\n     */\n    static uint192(v: BigNumberish): Typed { return n(v, 192); }\n\n    /**\n     *  Return a new ``uint200`` type for %%v%%.\n     */\n    static uint200(v: BigNumberish): Typed { return n(v, 200); }\n\n    /**\n     *  Return a new ``uint208`` type for %%v%%.\n     */\n    static uint208(v: BigNumberish): Typed { return n(v, 208); }\n\n    /**\n     *  Return a new ``uint216`` type for %%v%%.\n     */\n    static uint216(v: BigNumberish): Typed { return n(v, 216); }\n\n    /**\n     *  Return a new ``uint224`` type for %%v%%.\n     */\n    static uint224(v: BigNumberish): Typed { return n(v, 224); }\n\n    /**\n     *  Return a new ``uint232`` type for %%v%%.\n     */\n    static uint232(v: BigNumberish): Typed { return n(v, 232); }\n\n    /**\n     *  Return a new ``uint240`` type for %%v%%.\n     */\n    static uint240(v: BigNumberish): Typed { return n(v, 240); }\n\n    /**\n     *  Return a new ``uint248`` type for %%v%%.\n     */\n    static uint248(v: BigNumberish): Typed { return n(v, 248); }\n\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */\n    static uint256(v: BigNumberish): Typed { return n(v, 256); }\n\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */\n    static uint(v: BigNumberish): Typed { return n(v, 256); }\n\n    /**\n     *  Return a new ``int8`` type for %%v%%.\n     */\n    static int8(v: BigNumberish): Typed { return n(v, -8); }\n\n    /**\n     *  Return a new ``int16`` type for %%v%%.\n     */\n    static int16(v: BigNumberish): Typed { return n(v, -16); }\n\n    /**\n     *  Return a new ``int24`` type for %%v%%.\n     */\n    static int24(v: BigNumberish): Typed { return n(v, -24); }\n\n    /**\n     *  Return a new ``int32`` type for %%v%%.\n     */\n    static int32(v: BigNumberish): Typed { return n(v, -32); }\n\n    /**\n     *  Return a new ``int40`` type for %%v%%.\n     */\n    static int40(v: BigNumberish): Typed { return n(v, -40); }\n\n    /**\n     *  Return a new ``int48`` type for %%v%%.\n     */\n    static int48(v: BigNumberish): Typed { return n(v, -48); }\n\n    /**\n     *  Return a new ``int56`` type for %%v%%.\n     */\n    static int56(v: BigNumberish): Typed { return n(v, -56); }\n\n    /**\n     *  Return a new ``int64`` type for %%v%%.\n     */\n    static int64(v: BigNumberish): Typed { return n(v, -64); }\n\n    /**\n     *  Return a new ``int72`` type for %%v%%.\n     */\n    static int72(v: BigNumberish): Typed { return n(v, -72); }\n\n    /**\n     *  Return a new ``int80`` type for %%v%%.\n     */\n    static int80(v: BigNumberish): Typed { return n(v, -80); }\n\n    /**\n     *  Return a new ``int88`` type for %%v%%.\n     */\n    static int88(v: BigNumberish): Typed { return n(v, -88); }\n\n    /**\n     *  Return a new ``int96`` type for %%v%%.\n     */\n    static int96(v: BigNumberish): Typed { return n(v, -96); }\n\n    /**\n     *  Return a new ``int104`` type for %%v%%.\n     */\n    static int104(v: BigNumberish): Typed { return n(v, -104); }\n\n    /**\n     *  Return a new ``int112`` type for %%v%%.\n     */\n    static int112(v: BigNumberish): Typed { return n(v, -112); }\n\n    /**\n     *  Return a new ``int120`` type for %%v%%.\n     */\n    static int120(v: BigNumberish): Typed { return n(v, -120); }\n\n    /**\n     *  Return a new ``int128`` type for %%v%%.\n     */\n    static int128(v: BigNumberish): Typed { return n(v, -128); }\n\n    /**\n     *  Return a new ``int136`` type for %%v%%.\n     */\n    static int136(v: BigNumberish): Typed { return n(v, -136); }\n\n    /**\n     *  Return a new ``int144`` type for %%v%%.\n     */\n    static int144(v: BigNumberish): Typed { return n(v, -144); }\n\n    /**\n     *  Return a new ``int52`` type for %%v%%.\n     */\n    static int152(v: BigNumberish): Typed { return n(v, -152); }\n\n    /**\n     *  Return a new ``int160`` type for %%v%%.\n     */\n    static int160(v: BigNumberish): Typed { return n(v, -160); }\n\n    /**\n     *  Return a new ``int168`` type for %%v%%.\n     */\n    static int168(v: BigNumberish): Typed { return n(v, -168); }\n\n    /**\n     *  Return a new ``int176`` type for %%v%%.\n     */\n    static int176(v: BigNumberish): Typed { return n(v, -176); }\n\n    /**\n     *  Return a new ``int184`` type for %%v%%.\n     */\n    static int184(v: BigNumberish): Typed { return n(v, -184); }\n\n    /**\n     *  Return a new ``int92`` type for %%v%%.\n     */\n    static int192(v: BigNumberish): Typed { return n(v, -192); }\n\n    /**\n     *  Return a new ``int200`` type for %%v%%.\n     */\n    static int200(v: BigNumberish): Typed { return n(v, -200); }\n\n    /**\n     *  Return a new ``int208`` type for %%v%%.\n     */\n    static int208(v: BigNumberish): Typed { return n(v, -208); }\n\n    /**\n     *  Return a new ``int216`` type for %%v%%.\n     */\n    static int216(v: BigNumberish): Typed { return n(v, -216); }\n\n    /**\n     *  Return a new ``int224`` type for %%v%%.\n     */\n    static int224(v: BigNumberish): Typed { return n(v, -224); }\n\n    /**\n     *  Return a new ``int232`` type for %%v%%.\n     */\n    static int232(v: BigNumberish): Typed { return n(v, -232); }\n\n    /**\n     *  Return a new ``int240`` type for %%v%%.\n     */\n    static int240(v: BigNumberish): Typed { return n(v, -240); }\n\n    /**\n     *  Return a new ``int248`` type for %%v%%.\n     */\n    static int248(v: BigNumberish): Typed { return n(v, -248); }\n\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */\n    static int256(v: BigNumberish): Typed { return n(v, -256); }\n\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */\n    static int(v: BigNumberish): Typed { return n(v, -256); }\n\n    /**\n     *  Return a new ``bytes1`` type for %%v%%.\n     */\n    static bytes1(v: BytesLike): Typed { return b(v, 1); }\n\n    /**\n     *  Return a new ``bytes2`` type for %%v%%.\n     */\n    static bytes2(v: BytesLike): Typed { return b(v, 2); }\n\n    /**\n     *  Return a new ``bytes3`` type for %%v%%.\n     */\n    static bytes3(v: BytesLike): Typed { return b(v, 3); }\n\n    /**\n     *  Return a new ``bytes4`` type for %%v%%.\n     */\n    static bytes4(v: BytesLike): Typed { return b(v, 4); }\n\n    /**\n     *  Return a new ``bytes5`` type for %%v%%.\n     */\n    static bytes5(v: BytesLike): Typed { return b(v, 5); }\n\n    /**\n     *  Return a new ``bytes6`` type for %%v%%.\n     */\n    static bytes6(v: BytesLike): Typed { return b(v, 6); }\n\n    /**\n     *  Return a new ``bytes7`` type for %%v%%.\n     */\n    static bytes7(v: BytesLike): Typed { return b(v, 7); }\n\n    /**\n     *  Return a new ``bytes8`` type for %%v%%.\n     */\n    static bytes8(v: BytesLike): Typed { return b(v, 8); }\n\n    /**\n     *  Return a new ``bytes9`` type for %%v%%.\n     */\n    static bytes9(v: BytesLike): Typed { return b(v, 9); }\n\n    /**\n     *  Return a new ``bytes10`` type for %%v%%.\n     */\n    static bytes10(v: BytesLike): Typed { return b(v, 10); }\n\n    /**\n     *  Return a new ``bytes11`` type for %%v%%.\n     */\n    static bytes11(v: BytesLike): Typed { return b(v, 11); }\n\n    /**\n     *  Return a new ``bytes12`` type for %%v%%.\n     */\n    static bytes12(v: BytesLike): Typed { return b(v, 12); }\n\n    /**\n     *  Return a new ``bytes13`` type for %%v%%.\n     */\n    static bytes13(v: BytesLike): Typed { return b(v, 13); }\n\n    /**\n     *  Return a new ``bytes14`` type for %%v%%.\n     */\n    static bytes14(v: BytesLike): Typed { return b(v, 14); }\n\n    /**\n     *  Return a new ``bytes15`` type for %%v%%.\n     */\n    static bytes15(v: BytesLike): Typed { return b(v, 15); }\n\n    /**\n     *  Return a new ``bytes16`` type for %%v%%.\n     */\n    static bytes16(v: BytesLike): Typed { return b(v, 16); }\n\n    /**\n     *  Return a new ``bytes17`` type for %%v%%.\n     */\n    static bytes17(v: BytesLike): Typed { return b(v, 17); }\n\n    /**\n     *  Return a new ``bytes18`` type for %%v%%.\n     */\n    static bytes18(v: BytesLike): Typed { return b(v, 18); }\n\n    /**\n     *  Return a new ``bytes19`` type for %%v%%.\n     */\n    static bytes19(v: BytesLike): Typed { return b(v, 19); }\n\n    /**\n     *  Return a new ``bytes20`` type for %%v%%.\n     */\n    static bytes20(v: BytesLike): Typed { return b(v, 20); }\n\n    /**\n     *  Return a new ``bytes21`` type for %%v%%.\n     */\n    static bytes21(v: BytesLike): Typed { return b(v, 21); }\n\n    /**\n     *  Return a new ``bytes22`` type for %%v%%.\n     */\n    static bytes22(v: BytesLike): Typed { return b(v, 22); }\n\n    /**\n     *  Return a new ``bytes23`` type for %%v%%.\n     */\n    static bytes23(v: BytesLike): Typed { return b(v, 23); }\n\n    /**\n     *  Return a new ``bytes24`` type for %%v%%.\n     */\n    static bytes24(v: BytesLike): Typed { return b(v, 24); }\n\n    /**\n     *  Return a new ``bytes25`` type for %%v%%.\n     */\n    static bytes25(v: BytesLike): Typed { return b(v, 25); }\n\n    /**\n     *  Return a new ``bytes26`` type for %%v%%.\n     */\n    static bytes26(v: BytesLike): Typed { return b(v, 26); }\n\n    /**\n     *  Return a new ``bytes27`` type for %%v%%.\n     */\n    static bytes27(v: BytesLike): Typed { return b(v, 27); }\n\n    /**\n     *  Return a new ``bytes28`` type for %%v%%.\n     */\n    static bytes28(v: BytesLike): Typed { return b(v, 28); }\n\n    /**\n     *  Return a new ``bytes29`` type for %%v%%.\n     */\n    static bytes29(v: BytesLike): Typed { return b(v, 29); }\n\n    /**\n     *  Return a new ``bytes30`` type for %%v%%.\n     */\n    static bytes30(v: BytesLike): Typed { return b(v, 30); }\n\n    /**\n     *  Return a new ``bytes31`` type for %%v%%.\n     */\n    static bytes31(v: BytesLike): Typed { return b(v, 31); }\n\n    /**\n     *  Return a new ``bytes32`` type for %%v%%.\n     */\n    static bytes32(v: BytesLike): Typed { return b(v, 32); }\n\n\n    /**\n     *  Return a new ``address`` type for %%v%%.\n     */\n    static address(v: string | Addressable): Typed { return new Typed(_gaurd, \"address\", v); }\n\n    /**\n     *  Return a new ``bool`` type for %%v%%.\n     */\n    static bool(v: any): Typed { return new Typed(_gaurd, \"bool\", !!v); }\n\n    /**\n     *  Return a new ``bytes`` type for %%v%%.\n     */\n    static bytes(v: BytesLike): Typed { return new Typed(_gaurd, \"bytes\", v); }\n\n    /**\n     *  Return a new ``string`` type for %%v%%.\n     */\n    static string(v: string): Typed { return new Typed(_gaurd, \"string\", v); }\n\n\n    /**\n     *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.\n     */\n    static array(v: Array<any | Typed>, dynamic?: null | boolean): Typed {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"array\", v, dynamic);\n    }\n\n\n    /**\n     *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.\n     */\n    static tuple(v: Array<any | Typed> | Record<string, any | Typed>, name?: string): Typed {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"tuple\", v, name);\n    }\n\n\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */\n    static overrides(v: Record<string, any>): Typed {\n        return new Typed(_gaurd, \"overrides\", Object.assign({ }, v));\n    }\n\n    /**\n     *  Returns true only if %%value%% is a [[Typed]] instance.\n     */\n    static isTyped(value: any): value is Typed {\n        return (value\n            && typeof(value) === \"object\"\n            && \"_typedSymbol\" in value\n            && value._typedSymbol === _typedSymbol);\n    }\n\n    /**\n     *  If the value is a [[Typed]] instance, validates the underlying value\n     *  and returns it, otherwise returns value directly.\n     *\n     *  This is useful for functions that with to accept either a [[Typed]]\n     *  object or values.\n     */\n    static dereference<T>(value: Typed | T, type: string): T {\n        if (Typed.isTyped(value)) {\n            if (value.type !== type) {\n                throw new Error(`invalid type: expecetd ${ type }, got ${ value.type }`);\n            }\n            return value.value;\n        }\n        return value;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}