{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _get from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _classPrivateMethodInitSpec from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateMethodGet from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldSet from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport _classPrivateFieldGet from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _objectSpread from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n *  One of the most common ways to interact with the blockchain is\n *  by a node running a JSON-RPC interface which can be connected to,\n *  based on the transport, using:\n *\n *  - HTTP or HTTPS - [[JsonRpcProvider]]\n *  - WebSocket - [[WebSocketProvider]]\n *  - IPC - [[IpcSocketProvider]]\n *\n * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]\n */\n// @TODO:\n// - Add the batching API\n// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false\nimport { AbiCoder } from \"../abi/index.js\";\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { TypedDataEncoder } from \"../hash/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nimport { defineProperties, getBigInt, hexlify, isHexString, toQuantity, toUtf8Bytes, makeError, assert, assertArgument, FetchRequest, resolveProperties } from \"../utils/index.js\";\nimport { AbstractProvider, UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\nimport { Network } from \"./network.js\";\nimport { FilterIdEventSubscriber, FilterIdPendingSubscriber } from \"./subscriber-filterid.js\";\nimport { PollingEventSubscriber } from \"./subscriber-polling.js\";\nvar Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\n//const Methods = \"getAddress,then\".split(/,/g);\nfunction deepCopy(value) {\n  if (value == null || Primitive.indexOf(typeof value) >= 0) {\n    return value;\n  }\n  // Keep any Addressable\n  if (typeof value.getAddress === \"function\") {\n    return value;\n  }\n  if (Array.isArray(value)) {\n    return value.map(deepCopy);\n  }\n  if (typeof value === \"object\") {\n    return Object.keys(value).reduce(function (accum, key) {\n      accum[key] = value[key];\n      return accum;\n    }, {});\n  }\n  throw new Error(\"should not happen: \".concat(value, \" (\").concat(typeof value, \")\"));\n}\nfunction stall(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, duration);\n  });\n}\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\nfunction isPollable(value) {\n  return value && typeof value.pollingInterval === \"number\";\n}\nvar defaultOptions = {\n  polling: false,\n  staticNetwork: null,\n  batchStallTime: 10,\n  batchMaxSize: 1 << 20,\n  batchMaxCount: 100,\n  cacheTimeout: 250,\n  pollingInterval: 4000\n};\n// @TODO: Unchecked Signers\nexport var JsonRpcSigner = /*#__PURE__*/function (_AbstractSigner) {\n  _inherits(JsonRpcSigner, _AbstractSigner);\n  var _super = _createSuper(JsonRpcSigner);\n  function JsonRpcSigner(provider, address) {\n    var _this;\n    _classCallCheck(this, JsonRpcSigner);\n    _this = _super.call(this, provider);\n    _defineProperty(_assertThisInitialized(_this), \"address\", void 0);\n    address = getAddress(address);\n    defineProperties(_assertThisInitialized(_this), {\n      address: address\n    });\n    return _this;\n  }\n  _createClass(JsonRpcSigner, [{\n    key: \"connect\",\n    value: function connect(provider) {\n      assert(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"signer.connect\"\n      });\n    }\n  }, {\n    key: \"getAddress\",\n    value: function () {\n      var _getAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this.address);\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getAddress() {\n        return _getAddress.apply(this, arguments);\n      }\n      return getAddress;\n    }() // JSON-RPC will automatially fill in nonce, etc. so we just check from\n  }, {\n    key: \"populateTransaction\",\n    value: function () {\n      var _populateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tx) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.populateCall(tx);\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function populateTransaction(_x) {\n        return _populateTransaction.apply(this, arguments);\n      }\n      return populateTransaction;\n    }() // Returns just the hash of the transaction after sent, which is what\n    // the bare JSON-RPC API does;\n  }, {\n    key: \"sendUncheckedTransaction\",\n    value: function () {\n      var _sendUncheckedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_tx) {\n        var _this2 = this;\n        var tx, promises, _from, _to, hexTx;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              tx = deepCopy(_tx);\n              promises = []; // Make sure the from matches the sender\n              if (tx.from) {\n                _from = tx.from;\n                promises.push(_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                  var from;\n                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                    while (1) switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _context3.next = 2;\n                        return resolveAddress(_from, _this2.provider);\n                      case 2:\n                        from = _context3.sent;\n                        assertArgument(from != null && from.toLowerCase() === _this2.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n                        tx.from = from;\n                      case 5:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }, _callee3);\n                }))());\n              } else {\n                tx.from = this.address;\n              }\n              // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n              // wishes to use this, it is easy to specify explicitly, otherwise\n              // we look it up for them.\n              if (tx.gasLimit == null) {\n                promises.push(_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n                  return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                    while (1) switch (_context4.prev = _context4.next) {\n                      case 0:\n                        _context4.next = 2;\n                        return _this2.provider.estimateGas(_objectSpread(_objectSpread({}, tx), {}, {\n                          from: _this2.address\n                        }));\n                      case 2:\n                        tx.gasLimit = _context4.sent;\n                      case 3:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }, _callee4);\n                }))());\n              }\n              // The address may be an ENS name or Addressable\n              if (tx.to != null) {\n                _to = tx.to;\n                promises.push(_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n                  return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                    while (1) switch (_context5.prev = _context5.next) {\n                      case 0:\n                        _context5.next = 2;\n                        return resolveAddress(_to, _this2.provider);\n                      case 2:\n                        tx.to = _context5.sent;\n                      case 3:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }, _callee5);\n                }))());\n              }\n              // Wait until all of our properties are filled in\n              if (!promises.length) {\n                _context6.next = 8;\n                break;\n              }\n              _context6.next = 8;\n              return Promise.all(promises);\n            case 8:\n              hexTx = this.provider.getRpcTransaction(tx);\n              return _context6.abrupt(\"return\", this.provider.send(\"eth_sendTransaction\", [hexTx]));\n            case 10:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function sendUncheckedTransaction(_x2) {\n        return _sendUncheckedTransaction.apply(this, arguments);\n      }\n      return sendUncheckedTransaction;\n    }()\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(tx) {\n        var _this3 = this;\n        var blockNumber, hash;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.provider.getBlockNumber();\n            case 2:\n              blockNumber = _context8.sent;\n              _context8.next = 5;\n              return this.sendUncheckedTransaction(tx);\n            case 5:\n              hash = _context8.sent;\n              _context8.next = 8;\n              return new Promise(function (resolve, reject) {\n                var timeouts = [1000, 100];\n                var checkTx = /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n                    var tx;\n                    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n                      while (1) switch (_context7.prev = _context7.next) {\n                        case 0:\n                          _context7.next = 2;\n                          return _this3.provider.getTransaction(hash);\n                        case 2:\n                          tx = _context7.sent;\n                          if (!(tx != null)) {\n                            _context7.next = 6;\n                            break;\n                          }\n                          resolve(tx.replaceableTransaction(blockNumber));\n                          return _context7.abrupt(\"return\");\n                        case 6:\n                          // Wait another 4 seconds\n                          _this3.provider._setTimeout(function () {\n                            checkTx();\n                          }, timeouts.pop() || 4000);\n                        case 7:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }, _callee7);\n                  }));\n                  return function checkTx() {\n                    return _ref4.apply(this, arguments);\n                  };\n                }();\n                checkTx();\n              });\n            case 8:\n              return _context8.abrupt(\"return\", _context8.sent);\n            case 9:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function sendTransaction(_x3) {\n        return _sendTransaction.apply(this, arguments);\n      }\n      return sendTransaction;\n    }()\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(_tx) {\n        var tx, from, hexTx;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              tx = deepCopy(_tx); // Make sure the from matches the sender\n              if (!tx.from) {\n                _context9.next = 9;\n                break;\n              }\n              _context9.next = 4;\n              return resolveAddress(tx.from, this.provider);\n            case 4:\n              from = _context9.sent;\n              assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n              tx.from = from;\n              _context9.next = 10;\n              break;\n            case 9:\n              tx.from = this.address;\n            case 10:\n              hexTx = this.provider.getRpcTransaction(tx);\n              _context9.next = 13;\n              return this.provider.send(\"eth_signTransaction\", [hexTx]);\n            case 13:\n              return _context9.abrupt(\"return\", _context9.sent);\n            case 14:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function signTransaction(_x4) {\n        return _signTransaction.apply(this, arguments);\n      }\n      return signTransaction;\n    }()\n  }, {\n    key: \"signMessage\",\n    value: function () {\n      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(_message) {\n        var message;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              message = typeof _message === \"string\" ? toUtf8Bytes(_message) : _message;\n              _context10.next = 3;\n              return this.provider.send(\"personal_sign\", [hexlify(message), this.address.toLowerCase()]);\n            case 3:\n              return _context10.abrupt(\"return\", _context10.sent);\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function signMessage(_x5) {\n        return _signMessage.apply(this, arguments);\n      }\n      return signMessage;\n    }()\n  }, {\n    key: \"signTypedData\",\n    value: function () {\n      var _signTypedData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(domain, types, _value) {\n        var value, populated;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              value = deepCopy(_value); // Populate any ENS names (in-place)\n              _context12.next = 3;\n              return TypedDataEncoder.resolveNames(domain, types, value, /*#__PURE__*/function () {\n                var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(value) {\n                  var address;\n                  return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n                    while (1) switch (_context11.prev = _context11.next) {\n                      case 0:\n                        _context11.next = 2;\n                        return resolveAddress(value);\n                      case 2:\n                        address = _context11.sent;\n                        assertArgument(address != null, \"TypedData does not support null address\", \"value\", value);\n                        return _context11.abrupt(\"return\", address);\n                      case 5:\n                      case \"end\":\n                        return _context11.stop();\n                    }\n                  }, _callee11);\n                }));\n                return function (_x9) {\n                  return _ref5.apply(this, arguments);\n                };\n              }());\n            case 3:\n              populated = _context12.sent;\n              _context12.next = 6;\n              return this.provider.send(\"eth_signTypedData_v4\", [this.address.toLowerCase(), JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n            case 6:\n              return _context12.abrupt(\"return\", _context12.sent);\n            case 7:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function signTypedData(_x6, _x7, _x8) {\n        return _signTypedData.apply(this, arguments);\n      }\n      return signTypedData;\n    }()\n  }, {\n    key: \"unlock\",\n    value: function () {\n      var _unlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(password) {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              return _context13.abrupt(\"return\", this.provider.send(\"personal_unlockAccount\", [this.address.toLowerCase(), password, null]));\n            case 1:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function unlock(_x10) {\n        return _unlock.apply(this, arguments);\n      }\n      return unlock;\n    }() // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n  }, {\n    key: \"_legacySignMessage\",\n    value: function () {\n      var _legacySignMessage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(_message) {\n        var message;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              message = typeof _message === \"string\" ? toUtf8Bytes(_message) : _message;\n              _context14.next = 3;\n              return this.provider.send(\"eth_sign\", [this.address.toLowerCase(), hexlify(message)]);\n            case 3:\n              return _context14.abrupt(\"return\", _context14.sent);\n            case 4:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n      function _legacySignMessage(_x11) {\n        return _legacySignMessage2.apply(this, arguments);\n      }\n      return _legacySignMessage;\n    }()\n  }]);\n  return JsonRpcSigner;\n}(AbstractSigner);\n/**\n *  The JsonRpcApiProvider is an abstract class and **MUST** be\n *  sub-classed.\n *\n *  It provides the base for all JSON-RPC-based Provider interaction.\n *\n *  Sub-classing Notes:\n *  - a sub-class MUST override _send\n *  - a sub-class MUST call the `_start()` method once connected\n */\nvar _options = /*#__PURE__*/new WeakMap();\nvar _nextId = /*#__PURE__*/new WeakMap();\nvar _payloads = /*#__PURE__*/new WeakMap();\nvar _drainTimer = /*#__PURE__*/new WeakMap();\nvar _notReady = /*#__PURE__*/new WeakMap();\nvar _network = /*#__PURE__*/new WeakMap();\nvar _scheduleDrain = /*#__PURE__*/new WeakSet();\nexport var JsonRpcApiProvider = /*#__PURE__*/function (_AbstractProvider) {\n  _inherits(JsonRpcApiProvider, _AbstractProvider);\n  var _super2 = _createSuper(JsonRpcApiProvider);\n  function JsonRpcApiProvider(network, options) {\n    var _this4;\n    _classCallCheck(this, JsonRpcApiProvider);\n    _this4 = _super2.call(this, network, options);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this4), _scheduleDrain);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this4), _options, {\n      writable: true,\n      value: void 0\n    });\n    // The next ID to use for the JSON-RPC ID field\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this4), _nextId, {\n      writable: true,\n      value: void 0\n    });\n    // Payloads are queued and triggered in batches using the drainTimer\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this4), _payloads, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this4), _drainTimer, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this4), _notReady, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this4), _network, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(_assertThisInitialized(_this4), _nextId, 1);\n    _classPrivateFieldSet(_assertThisInitialized(_this4), _options, Object.assign({}, defaultOptions, options || {}));\n    _classPrivateFieldSet(_assertThisInitialized(_this4), _payloads, []);\n    _classPrivateFieldSet(_assertThisInitialized(_this4), _drainTimer, null);\n    _classPrivateFieldSet(_assertThisInitialized(_this4), _network, null);\n    {\n      var resolve = null;\n      var promise = new Promise(function (_resolve) {\n        resolve = _resolve;\n      });\n      _classPrivateFieldSet(_assertThisInitialized(_this4), _notReady, {\n        promise: promise,\n        resolve: resolve\n      });\n    }\n    // Make sure any static network is compatbile with the provided netwrok\n    var staticNetwork = _this4._getOption(\"staticNetwork\");\n    if (staticNetwork) {\n      assertArgument(network == null || staticNetwork.matches(network), \"staticNetwork MUST match network object\", \"options\", options);\n      _classPrivateFieldSet(_assertThisInitialized(_this4), _network, staticNetwork);\n    }\n    return _this4;\n  }\n  /**\n   *  Returns the value associated with the option %%key%%.\n   *\n   *  Sub-classes can use this to inquire about configuration options.\n   */\n  _createClass(JsonRpcApiProvider, [{\n    key: \"_getOption\",\n    value: function _getOption(key) {\n      return _classPrivateFieldGet(this, _options)[key];\n    }\n    /**\n     *  Gets the [[Network]] this provider has committed to. On each call, the network\n     *  is detected, and if it has changed, the call will reject.\n     */\n  }, {\n    key: \"_network\",\n    get: function get() {\n      assert(_classPrivateFieldGet(this, _network), \"network is not available yet\", \"NETWORK_ERROR\");\n      return _classPrivateFieldGet(this, _network);\n    }\n    /**\n     *  Resolves to the non-normalized value by performing %%req%%.\n     *\n     *  Sub-classes may override this to modify behavior of actions,\n     *  and should generally call ``super._perform`` as a fallback.\n     */\n  }, {\n    key: \"_perform\",\n    value: function () {\n      var _perform2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(req) {\n        var tx, feeData, request;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              if (!(req.method === \"call\" || req.method === \"estimateGas\")) {\n                _context15.next = 8;\n                break;\n              }\n              tx = req.transaction;\n              if (!(tx && tx.type != null && getBigInt(tx.type))) {\n                _context15.next = 8;\n                break;\n              }\n              if (!(tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null)) {\n                _context15.next = 8;\n                break;\n              }\n              _context15.next = 6;\n              return this.getFeeData();\n            case 6:\n              feeData = _context15.sent;\n              if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                // Network doesn't know about EIP-1559 (and hence type)\n                req = Object.assign({}, req, {\n                  transaction: Object.assign({}, tx, {\n                    type: undefined\n                  })\n                });\n              }\n            case 8:\n              request = this.getRpcRequest(req);\n              if (!(request != null)) {\n                _context15.next = 13;\n                break;\n              }\n              _context15.next = 12;\n              return this.send(request.method, request.args);\n            case 12:\n              return _context15.abrupt(\"return\", _context15.sent);\n            case 13:\n              return _context15.abrupt(\"return\", _get(_getPrototypeOf(JsonRpcApiProvider.prototype), \"_perform\", this).call(this, req));\n            case 14:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }));\n      function _perform(_x12) {\n        return _perform2.apply(this, arguments);\n      }\n      return _perform;\n    }()\n    /**\n     *  Sub-classes may override this; it detects the *actual* network that\n     *  we are **currently** connected to.\n     *\n     *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\n     *  _send primitive must be used instead.\n     */\n  }, {\n    key: \"_detectNetwork\",\n    value: function () {\n      var _detectNetwork2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n        var _this$nextId, _this$nextId2;\n        var network, payload, result;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              network = this._getOption(\"staticNetwork\");\n              if (!network) {\n                _context16.next = 3;\n                break;\n              }\n              return _context16.abrupt(\"return\", network);\n            case 3:\n              if (!this.ready) {\n                _context16.next = 11;\n                break;\n              }\n              _context16.t0 = Network;\n              _context16.t1 = getBigInt;\n              _context16.next = 8;\n              return this.send(\"eth_chainId\", []);\n            case 8:\n              _context16.t2 = _context16.sent;\n              _context16.t3 = (0, _context16.t1)(_context16.t2);\n              return _context16.abrupt(\"return\", _context16.t0.from.call(_context16.t0, _context16.t3));\n            case 11:\n              // We are not ready yet; use the primitive _send\n              payload = {\n                id: (_classPrivateFieldSet(this, _nextId, (_this$nextId = _classPrivateFieldGet(this, _nextId), _this$nextId2 = _this$nextId++, _this$nextId)), _this$nextId2),\n                method: \"eth_chainId\",\n                params: [],\n                jsonrpc: \"2.0\"\n              };\n              this.emit(\"debug\", {\n                action: \"sendRpcPayload\",\n                payload: payload\n              });\n              _context16.prev = 13;\n              _context16.next = 16;\n              return this._send(payload);\n            case 16:\n              result = _context16.sent[0];\n              _context16.next = 23;\n              break;\n            case 19:\n              _context16.prev = 19;\n              _context16.t4 = _context16[\"catch\"](13);\n              this.emit(\"debug\", {\n                action: \"receiveRpcError\",\n                error: _context16.t4\n              });\n              throw _context16.t4;\n            case 23:\n              this.emit(\"debug\", {\n                action: \"receiveRpcResult\",\n                result: result\n              });\n              if (!(\"result\" in result)) {\n                _context16.next = 26;\n                break;\n              }\n              return _context16.abrupt(\"return\", Network.from(getBigInt(result.result)));\n            case 26:\n              throw this.getRpcError(payload, result);\n            case 27:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this, [[13, 19]]);\n      }));\n      function _detectNetwork() {\n        return _detectNetwork2.apply(this, arguments);\n      }\n      return _detectNetwork;\n    }()\n    /**\n     *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\n     *  will be passed to [[_send]] from [[send]]. If it is overridden, then\n     *  ``super._start()`` **MUST** be called.\n     *\n     *  Calling it multiple times is safe and has no effect.\n     */\n  }, {\n    key: \"_start\",\n    value: function _start() {\n      var _this5 = this;\n      if (_classPrivateFieldGet(this, _notReady) == null || _classPrivateFieldGet(this, _notReady).resolve == null) {\n        return;\n      }\n      _classPrivateFieldGet(this, _notReady).resolve();\n      _classPrivateFieldSet(this, _notReady, null);\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              if (!(_classPrivateFieldGet(_this5, _network) == null && !_this5.destroyed)) {\n                _context17.next = 21;\n                break;\n              }\n              _context17.prev = 1;\n              _context17.t0 = _classPrivateFieldSet;\n              _context17.t1 = _this5;\n              _context17.t2 = _network;\n              _context17.next = 7;\n              return _this5._detectNetwork();\n            case 7:\n              _context17.t3 = _context17.sent;\n              (0, _context17.t0)(_context17.t1, _context17.t2, _context17.t3);\n              _context17.next = 19;\n              break;\n            case 11:\n              _context17.prev = 11;\n              _context17.t4 = _context17[\"catch\"](1);\n              if (!_this5.destroyed) {\n                _context17.next = 15;\n                break;\n              }\n              return _context17.abrupt(\"break\", 21);\n            case 15:\n              console.log(\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\");\n              _this5.emit(\"error\", makeError(\"failed to bootstrap network detection\", \"NETWORK_ERROR\", {\n                event: \"initial-network-discovery\",\n                info: {\n                  error: _context17.t4\n                }\n              }));\n              _context17.next = 19;\n              return stall(1000);\n            case 19:\n              _context17.next = 0;\n              break;\n            case 21:\n              // Start dispatching requests\n              _classPrivateMethodGet(_this5, _scheduleDrain, _scheduleDrain2).call(_this5);\n            case 22:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17, null, [[1, 11]]);\n      }))();\n    }\n    /**\n     *  Resolves once the [[_start]] has been called. This can be used in\n     *  sub-classes to defer sending data until the connection has been\n     *  established.\n     */\n  }, {\n    key: \"_waitUntilReady\",\n    value: function () {\n      var _waitUntilReady2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              if (!(_classPrivateFieldGet(this, _notReady) == null)) {\n                _context18.next = 2;\n                break;\n              }\n              return _context18.abrupt(\"return\");\n            case 2:\n              _context18.next = 4;\n              return _classPrivateFieldGet(this, _notReady).promise;\n            case 4:\n              return _context18.abrupt(\"return\", _context18.sent);\n            case 5:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, this);\n      }));\n      function _waitUntilReady() {\n        return _waitUntilReady2.apply(this, arguments);\n      }\n      return _waitUntilReady;\n    }()\n    /**\n     *  Return a Subscriber that will manage the %%sub%%.\n     *\n     *  Sub-classes may override this to modify the behavior of\n     *  subscription management.\n     */\n  }, {\n    key: \"_getSubscriber\",\n    value: function _getSubscriber(sub) {\n      // Pending Filters aren't availble via polling\n      if (sub.type === \"pending\") {\n        return new FilterIdPendingSubscriber(this);\n      }\n      if (sub.type === \"event\") {\n        if (this._getOption(\"polling\")) {\n          return new PollingEventSubscriber(this, sub.filter);\n        }\n        return new FilterIdEventSubscriber(this, sub.filter);\n      }\n      // Orphaned Logs are handled automatically, by the filter, since\n      // logs with removed are emitted by it\n      if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\n        return new UnmanagedSubscriber(\"orphan\");\n      }\n      return _get(_getPrototypeOf(JsonRpcApiProvider.prototype), \"_getSubscriber\", this).call(this, sub);\n    }\n    /**\n     *  Returns true only if the [[_start]] has been called.\n     */\n  }, {\n    key: \"ready\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _notReady) == null;\n    }\n    /**\n     *  Returns %%tx%% as a normalized JSON-RPC transaction request,\n     *  which has all values hexlified and any numeric values converted\n     *  to Quantity values.\n     */\n  }, {\n    key: \"getRpcTransaction\",\n    value: function getRpcTransaction(tx) {\n      var result = {};\n      // JSON-RPC now requires numeric values to be \"quantity\" values\n      [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n        if (tx[key] == null) {\n          return;\n        }\n        var dstKey = key;\n        if (key === \"gasLimit\") {\n          dstKey = \"gas\";\n        }\n        result[dstKey] = toQuantity(getBigInt(tx[key], \"tx.\".concat(key)));\n      });\n      // Make sure addresses and data are lowercase\n      [\"from\", \"to\", \"data\"].forEach(function (key) {\n        if (tx[key] == null) {\n          return;\n        }\n        result[key] = hexlify(tx[key]);\n      });\n      // Normalize the access list object\n      if (tx.accessList) {\n        result[\"accessList\"] = accessListify(tx.accessList);\n      }\n      return result;\n    }\n    /**\n     *  Returns the request method and arguments required to perform\n     *  %%req%%.\n     */\n  }, {\n    key: \"getRpcRequest\",\n    value: function getRpcRequest(req) {\n      switch (req.method) {\n        case \"chainId\":\n          return {\n            method: \"eth_chainId\",\n            args: []\n          };\n        case \"getBlockNumber\":\n          return {\n            method: \"eth_blockNumber\",\n            args: []\n          };\n        case \"getGasPrice\":\n          return {\n            method: \"eth_gasPrice\",\n            args: []\n          };\n        case \"getBalance\":\n          return {\n            method: \"eth_getBalance\",\n            args: [getLowerCase(req.address), req.blockTag]\n          };\n        case \"getTransactionCount\":\n          return {\n            method: \"eth_getTransactionCount\",\n            args: [getLowerCase(req.address), req.blockTag]\n          };\n        case \"getCode\":\n          return {\n            method: \"eth_getCode\",\n            args: [getLowerCase(req.address), req.blockTag]\n          };\n        case \"getStorage\":\n          return {\n            method: \"eth_getStorageAt\",\n            args: [getLowerCase(req.address), \"0x\" + req.position.toString(16), req.blockTag]\n          };\n        case \"broadcastTransaction\":\n          return {\n            method: \"eth_sendRawTransaction\",\n            args: [req.signedTransaction]\n          };\n        case \"getBlock\":\n          if (\"blockTag\" in req) {\n            return {\n              method: \"eth_getBlockByNumber\",\n              args: [req.blockTag, !!req.includeTransactions]\n            };\n          } else if (\"blockHash\" in req) {\n            return {\n              method: \"eth_getBlockByHash\",\n              args: [req.blockHash, !!req.includeTransactions]\n            };\n          }\n          break;\n        case \"getTransaction\":\n          return {\n            method: \"eth_getTransactionByHash\",\n            args: [req.hash]\n          };\n        case \"getTransactionReceipt\":\n          return {\n            method: \"eth_getTransactionReceipt\",\n            args: [req.hash]\n          };\n        case \"call\":\n          return {\n            method: \"eth_call\",\n            args: [this.getRpcTransaction(req.transaction), req.blockTag]\n          };\n        case \"estimateGas\":\n          {\n            return {\n              method: \"eth_estimateGas\",\n              args: [this.getRpcTransaction(req.transaction)]\n            };\n          }\n        case \"getLogs\":\n          if (req.filter && req.filter.address != null) {\n            if (Array.isArray(req.filter.address)) {\n              req.filter.address = req.filter.address.map(getLowerCase);\n            } else {\n              req.filter.address = getLowerCase(req.filter.address);\n            }\n          }\n          return {\n            method: \"eth_getLogs\",\n            args: [req.filter]\n          };\n      }\n      return null;\n    }\n    /**\n     *  Returns an ethers-style Error for the given JSON-RPC error\n     *  %%payload%%, coalescing the various strings and error shapes\n     *  that different nodes return, coercing them into a machine-readable\n     *  standardized error.\n     */\n  }, {\n    key: \"getRpcError\",\n    value: function getRpcError(payload, _error) {\n      var method = payload.method;\n      var error = _error.error;\n      if (method === \"eth_estimateGas\" && error.message) {\n        var msg = error.message;\n        if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\n          return makeError(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n            transaction: payload.params[0],\n            info: {\n              payload: payload,\n              error: error\n            }\n          });\n        }\n      }\n      if (method === \"eth_call\" || method === \"eth_estimateGas\") {\n        var result = spelunkData(error);\n        var e = AbiCoder.getBuiltinCallException(method === \"eth_call\" ? \"call\" : \"estimateGas\", payload.params[0], result ? result.data : null);\n        e.info = {\n          error: error,\n          payload: payload\n        };\n        return e;\n      }\n      // Only estimateGas and call can return arbitrary contract-defined text, so now we\n      // we can process text safely.\n      var message = JSON.stringify(spelunkMessage(error));\n      if (typeof error.message === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\n        var actionMap = {\n          eth_sign: \"signMessage\",\n          personal_sign: \"signMessage\",\n          eth_signTypedData_v4: \"signTypedData\",\n          eth_signTransaction: \"signTransaction\",\n          eth_sendTransaction: \"sendTransaction\",\n          eth_requestAccounts: \"requestAccess\",\n          wallet_requestAccounts: \"requestAccess\"\n        };\n        return makeError(\"user rejected action\", \"ACTION_REJECTED\", {\n          action: actionMap[method] || \"unknown\",\n          reason: \"rejected\",\n          info: {\n            payload: payload,\n            error: error\n          }\n        });\n      }\n      if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\n        var transaction = payload.params[0];\n        if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n          return makeError(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n            transaction: transaction,\n            info: {\n              error: error\n            }\n          });\n        }\n        if (message.match(/nonce/i) && message.match(/too low/i)) {\n          return makeError(\"nonce has already been used\", \"NONCE_EXPIRED\", {\n            transaction: transaction,\n            info: {\n              error: error\n            }\n          });\n        }\n        // \"replacement transaction underpriced\"\n        if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\n          return makeError(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n            transaction: transaction,\n            info: {\n              error: error\n            }\n          });\n        }\n        if (message.match(/only replay-protected/i)) {\n          return makeError(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\n            operation: method,\n            info: {\n              transaction: transaction,\n              info: {\n                error: error\n              }\n            }\n          });\n        }\n      }\n      var unsupported = !!message.match(/the method .* does not exist/i);\n      if (!unsupported) {\n        if (error && error.details && error.details.startsWith(\"Unauthorized method:\")) {\n          unsupported = true;\n        }\n      }\n      if (unsupported) {\n        return makeError(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\n          operation: payload.method,\n          info: {\n            error: error,\n            payload: payload\n          }\n        });\n      }\n      return makeError(\"could not coalesce error\", \"UNKNOWN_ERROR\", {\n        error: error,\n        payload: payload\n      });\n    }\n    /**\n     *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\n     *  over the underlying channel. This can be used to call methods\n     *  on the backend that do not have a high-level API within the Provider\n     *  API.\n     *\n     *  This method queues requests according to the batch constraints\n     *  in the options, assigns the request a unique ID.\n     *\n     *  **Do NOT override** this method in sub-classes; instead\n     *  override [[_send]] or force the options values in the\n     *  call to the constructor to modify this method's behavior.\n     */\n  }, {\n    key: \"send\",\n    value: function send(method, params) {\n      var _this$nextId3,\n        _this$nextId4,\n        _this6 = this;\n      // @TODO: cache chainId?? purge on switch_networks\n      // We have been destroyed; no operations are supported anymore\n      if (this.destroyed) {\n        return Promise.reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n          operation: method\n        }));\n      }\n      var id = (_classPrivateFieldSet(this, _nextId, (_this$nextId3 = _classPrivateFieldGet(this, _nextId), _this$nextId4 = _this$nextId3++, _this$nextId3)), _this$nextId4);\n      var promise = new Promise(function (resolve, reject) {\n        _classPrivateFieldGet(_this6, _payloads).push({\n          resolve: resolve,\n          reject: reject,\n          payload: {\n            method: method,\n            params: params,\n            id: id,\n            jsonrpc: \"2.0\"\n          }\n        });\n      });\n      // If there is not a pending drainTimer, set one\n      _classPrivateMethodGet(this, _scheduleDrain, _scheduleDrain2).call(this);\n      return promise;\n    }\n    /**\n     *  Resolves to the [[Signer]] account for  %%address%% managed by\n     *  the client.\n     *\n     *  If the %%address%% is a number, it is used as an index in the\n     *  the accounts from [[listAccounts]].\n     *\n     *  This can only be used on clients which manage accounts (such as\n     *  Geth with imported account or MetaMask).\n     *\n     *  Throws if the account doesn't exist.\n     */\n  }, {\n    key: \"getSigner\",\n    value: function () {\n      var _getSigner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(address) {\n        var accountsPromise, _accounts, _yield$resolvePropert, accounts, _iterator, _step, account;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              if (address == null) {\n                address = 0;\n              }\n              accountsPromise = this.send(\"eth_accounts\", []); // Account index\n              if (!(typeof address === \"number\")) {\n                _context19.next = 9;\n                break;\n              }\n              _context19.next = 5;\n              return accountsPromise;\n            case 5:\n              _accounts = _context19.sent;\n              if (!(address >= _accounts.length)) {\n                _context19.next = 8;\n                break;\n              }\n              throw new Error(\"no such account\");\n            case 8:\n              return _context19.abrupt(\"return\", new JsonRpcSigner(this, _accounts[address]));\n            case 9:\n              _context19.next = 11;\n              return resolveProperties({\n                network: this.getNetwork(),\n                accounts: accountsPromise\n              });\n            case 11:\n              _yield$resolvePropert = _context19.sent;\n              accounts = _yield$resolvePropert.accounts;\n              // Account address\n              address = getAddress(address);\n              _iterator = _createForOfIteratorHelper(accounts);\n              _context19.prev = 15;\n              _iterator.s();\n            case 17:\n              if ((_step = _iterator.n()).done) {\n                _context19.next = 23;\n                break;\n              }\n              account = _step.value;\n              if (!(getAddress(account) === address)) {\n                _context19.next = 21;\n                break;\n              }\n              return _context19.abrupt(\"return\", new JsonRpcSigner(this, address));\n            case 21:\n              _context19.next = 17;\n              break;\n            case 23:\n              _context19.next = 28;\n              break;\n            case 25:\n              _context19.prev = 25;\n              _context19.t0 = _context19[\"catch\"](15);\n              _iterator.e(_context19.t0);\n            case 28:\n              _context19.prev = 28;\n              _iterator.f();\n              return _context19.finish(28);\n            case 31:\n              throw new Error(\"invalid account\");\n            case 32:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this, [[15, 25, 28, 31]]);\n      }));\n      function getSigner(_x13) {\n        return _getSigner.apply(this, arguments);\n      }\n      return getSigner;\n    }()\n  }, {\n    key: \"listAccounts\",\n    value: function () {\n      var _listAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n        var _this7 = this;\n        var accounts;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.next = 2;\n              return this.send(\"eth_accounts\", []);\n            case 2:\n              accounts = _context20.sent;\n              return _context20.abrupt(\"return\", accounts.map(function (a) {\n                return new JsonRpcSigner(_this7, a);\n              }));\n            case 4:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20, this);\n      }));\n      function listAccounts() {\n        return _listAccounts.apply(this, arguments);\n      }\n      return listAccounts;\n    }()\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      // Stop processing requests\n      if (_classPrivateFieldGet(this, _drainTimer)) {\n        clearTimeout(_classPrivateFieldGet(this, _drainTimer));\n        _classPrivateFieldSet(this, _drainTimer, null);\n      }\n      // Cancel all pending requests\n      var _iterator2 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _payloads)),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _step2.value,\n            payload = _step2$value.payload,\n            reject = _step2$value.reject;\n          reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n            operation: payload.method\n          }));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      _classPrivateFieldSet(this, _payloads, []);\n      // Parent clean-up\n      _get(_getPrototypeOf(JsonRpcApiProvider.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n  return JsonRpcApiProvider;\n}(AbstractProvider);\n// @TODO: remove this in v7, it is not exported because this functionality\n// is exposed in the JsonRpcApiProvider by setting polling to true. It should\n// be safe to remove regardless, because it isn't reachable, but just in case.\n/**\n *  @_ignore:\n */\nfunction _scheduleDrain2() {\n  var _this11 = this;\n  if (_classPrivateFieldGet(this, _drainTimer)) {\n    return;\n  }\n  // If we aren't using batching, no hard in sending it immeidately\n  var stallTime = this._getOption(\"batchMaxCount\") === 1 ? 0 : this._getOption(\"batchStallTime\");\n  _classPrivateFieldSet(this, _drainTimer, setTimeout(function () {\n    _classPrivateFieldSet(_this11, _drainTimer, null);\n    var payloads = _classPrivateFieldGet(_this11, _payloads);\n    _classPrivateFieldSet(_this11, _payloads, []);\n    var _loop = function _loop() {\n      // Create payload batches that satisfy our batch constraints\n      var batch = [payloads.shift()];\n      while (payloads.length) {\n        if (batch.length === _classPrivateFieldGet(_this11, _options).batchMaxCount) {\n          break;\n        }\n        batch.push(payloads.shift());\n        var bytes = JSON.stringify(batch.map(function (p) {\n          return p.payload;\n        }));\n        if (bytes.length > _classPrivateFieldGet(_this11, _options).batchMaxSize) {\n          payloads.unshift(batch.pop());\n          break;\n        }\n      }\n      // Process the result to each payload\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n        var payload, result, _loop2, _ret, _i, _batch, _i2, _batch2, reject;\n        return _regeneratorRuntime().wrap(function _callee23$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              payload = batch.length === 1 ? batch[0].payload : batch.map(function (p) {\n                return p.payload;\n              });\n              _this11.emit(\"debug\", {\n                action: \"sendRpcPayload\",\n                payload: payload\n              });\n              _context24.prev = 2;\n              _context24.next = 5;\n              return _this11._send(payload);\n            case 5:\n              result = _context24.sent;\n              _this11.emit(\"debug\", {\n                action: \"receiveRpcResult\",\n                result: result\n              });\n              // Process results in batch order\n              _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2() {\n                var _batch$_i, resolve, reject, payload, resp, error;\n                return _regeneratorRuntime().wrap(function _loop2$(_context23) {\n                  while (1) switch (_context23.prev = _context23.next) {\n                    case 0:\n                      _batch$_i = _batch[_i], resolve = _batch$_i.resolve, reject = _batch$_i.reject, payload = _batch$_i.payload;\n                      if (!_this11.destroyed) {\n                        _context23.next = 4;\n                        break;\n                      }\n                      reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n                        operation: payload.method\n                      }));\n                      return _context23.abrupt(\"return\", 0);\n                    case 4:\n                      // Find the matching result\n                      resp = result.filter(function (r) {\n                        return r.id === payload.id;\n                      })[0]; // No result; the node failed us in unexpected ways\n                      if (!(resp == null)) {\n                        _context23.next = 10;\n                        break;\n                      }\n                      error = makeError(\"missing response for request\", \"BAD_DATA\", {\n                        value: result,\n                        info: {\n                          payload: payload\n                        }\n                      });\n                      _this11.emit(\"error\", error);\n                      reject(error);\n                      return _context23.abrupt(\"return\", 0);\n                    case 10:\n                      if (!(\"error\" in resp)) {\n                        _context23.next = 13;\n                        break;\n                      }\n                      reject(_this11.getRpcError(payload, resp));\n                      return _context23.abrupt(\"return\", 0);\n                    case 13:\n                      // All good; send the result\n                      resolve(resp.result);\n                    case 14:\n                    case \"end\":\n                      return _context23.stop();\n                  }\n                }, _loop2);\n              });\n              _i = 0, _batch = batch;\n            case 9:\n              if (!(_i < _batch.length)) {\n                _context24.next = 17;\n                break;\n              }\n              return _context24.delegateYield(_loop2(), \"t0\", 11);\n            case 11:\n              _ret = _context24.t0;\n              if (!(_ret === 0)) {\n                _context24.next = 14;\n                break;\n              }\n              return _context24.abrupt(\"continue\", 14);\n            case 14:\n              _i++;\n              _context24.next = 9;\n              break;\n            case 17:\n              _context24.next = 23;\n              break;\n            case 19:\n              _context24.prev = 19;\n              _context24.t1 = _context24[\"catch\"](2);\n              _this11.emit(\"debug\", {\n                action: \"receiveRpcError\",\n                error: _context24.t1\n              });\n              for (_i2 = 0, _batch2 = batch; _i2 < _batch2.length; _i2++) {\n                reject = _batch2[_i2].reject;\n                // @TODO: augment the error with the payload\n                reject(_context24.t1);\n              }\n            case 23:\n            case \"end\":\n              return _context24.stop();\n          }\n        }, _callee23, null, [[2, 19]]);\n      }))();\n    };\n    while (payloads.length) {\n      _loop();\n    }\n  }, stallTime));\n}\nvar _pollingInterval = /*#__PURE__*/new WeakMap();\nexport var JsonRpcApiPollingProvider = /*#__PURE__*/function (_JsonRpcApiProvider) {\n  _inherits(JsonRpcApiPollingProvider, _JsonRpcApiProvider);\n  var _super3 = _createSuper(JsonRpcApiPollingProvider);\n  function JsonRpcApiPollingProvider(network, options) {\n    var _this8;\n    _classCallCheck(this, JsonRpcApiPollingProvider);\n    _this8 = _super3.call(this, network, options);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this8), _pollingInterval, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(_assertThisInitialized(_this8), _pollingInterval, 4000);\n    return _this8;\n  }\n  _createClass(JsonRpcApiPollingProvider, [{\n    key: \"_getSubscriber\",\n    value: function _getSubscriber(sub) {\n      var subscriber = _get(_getPrototypeOf(JsonRpcApiPollingProvider.prototype), \"_getSubscriber\", this).call(this, sub);\n      if (isPollable(subscriber)) {\n        subscriber.pollingInterval = _classPrivateFieldGet(this, _pollingInterval);\n      }\n      return subscriber;\n    }\n    /**\n     *  The polling interval (default: 4000 ms)\n     */\n  }, {\n    key: \"pollingInterval\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _pollingInterval);\n    },\n    set: function set(value) {\n      var _this9 = this;\n      if (!Number.isInteger(value) || value < 0) {\n        throw new Error(\"invalid interval\");\n      }\n      _classPrivateFieldSet(this, _pollingInterval, value);\n      this._forEachSubscriber(function (sub) {\n        if (isPollable(sub)) {\n          sub.pollingInterval = _classPrivateFieldGet(_this9, _pollingInterval);\n        }\n      });\n    }\n  }]);\n  return JsonRpcApiPollingProvider;\n}(JsonRpcApiProvider);\n/**\n *  The JsonRpcProvider is one of the most common Providers,\n *  which performs all operations over HTTP (or HTTPS) requests.\n *\n *  Events are processed by polling the backend for the current block\n *  number; when it advances, all block-base events are then checked\n *  for updates.\n */\nvar _connect = /*#__PURE__*/new WeakMap();\nexport var JsonRpcProvider = /*#__PURE__*/function (_JsonRpcApiPollingPro) {\n  _inherits(JsonRpcProvider, _JsonRpcApiPollingPro);\n  var _super4 = _createSuper(JsonRpcProvider);\n  function JsonRpcProvider(url, network, options) {\n    var _this10;\n    _classCallCheck(this, JsonRpcProvider);\n    if (url == null) {\n      url = \"http:/\\/localhost:8545\";\n    }\n    _this10 = _super4.call(this, network, options);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this10), _connect, {\n      writable: true,\n      value: void 0\n    });\n    if (typeof url === \"string\") {\n      _classPrivateFieldSet(_assertThisInitialized(_this10), _connect, new FetchRequest(url));\n    } else {\n      _classPrivateFieldSet(_assertThisInitialized(_this10), _connect, url.clone());\n    }\n    return _this10;\n  }\n  _createClass(JsonRpcProvider, [{\n    key: \"_getConnection\",\n    value: function _getConnection() {\n      return _classPrivateFieldGet(this, _connect).clone();\n    }\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(method, params) {\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return this._start();\n            case 2:\n              _context21.next = 4;\n              return _get(_getPrototypeOf(JsonRpcProvider.prototype), \"send\", this).call(this, method, params);\n            case 4:\n              return _context21.abrupt(\"return\", _context21.sent);\n            case 5:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21, this);\n      }));\n      function send(_x14, _x15) {\n        return _send2.apply(this, arguments);\n      }\n      return send;\n    }()\n  }, {\n    key: \"_send\",\n    value: function () {\n      var _send3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(payload) {\n        var request, response, resp;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              // Configure a POST connection for the requested method\n              request = this._getConnection();\n              request.body = JSON.stringify(payload);\n              request.setHeader(\"content-type\", \"application/json\");\n              _context22.next = 5;\n              return request.send();\n            case 5:\n              response = _context22.sent;\n              response.assertOk();\n              resp = response.bodyJson;\n              if (!Array.isArray(resp)) {\n                resp = [resp];\n              }\n              return _context22.abrupt(\"return\", resp);\n            case 10:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22, this);\n      }));\n      function _send(_x16) {\n        return _send3.apply(this, arguments);\n      }\n      return _send;\n    }()\n  }]);\n  return JsonRpcProvider;\n}(JsonRpcApiPollingProvider);\nfunction spelunkData(value) {\n  if (value == null) {\n    return null;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\" && value.message.match(/revert/i) && isHexString(value.data)) {\n    return {\n      message: value.message,\n      data: value.data\n    };\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (var key in value) {\n      var result = spelunkData(value[key]);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return spelunkData(JSON.parse(value));\n    } catch (error) {}\n  }\n  return null;\n}\nfunction _spelunkMessage(value, result) {\n  if (value == null) {\n    return;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\") {\n    result.push(value.message);\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (var key in value) {\n      _spelunkMessage(value[key], result);\n    }\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return _spelunkMessage(JSON.parse(value), result);\n    } catch (error) {}\n  }\n}\nfunction spelunkMessage(value) {\n  var result = [];\n  _spelunkMessage(value, result);\n  return result;\n}","map":{"version":3,"names":["AbiCoder","getAddress","resolveAddress","TypedDataEncoder","accessListify","defineProperties","getBigInt","hexlify","isHexString","toQuantity","toUtf8Bytes","makeError","assert","assertArgument","FetchRequest","resolveProperties","AbstractProvider","UnmanagedSubscriber","AbstractSigner","Network","FilterIdEventSubscriber","FilterIdPendingSubscriber","PollingEventSubscriber","Primitive","split","deepCopy","value","indexOf","Array","isArray","map","Object","keys","reduce","accum","key","Error","concat","stall","duration","Promise","resolve","setTimeout","getLowerCase","toLowerCase","isPollable","pollingInterval","defaultOptions","polling","staticNetwork","batchStallTime","batchMaxSize","batchMaxCount","cacheTimeout","JsonRpcSigner","_AbstractSigner","_inherits","_super","_createSuper","provider","address","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","_createClass","connect","operation","_getAddress","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","stop","apply","arguments","_populateTransaction","_callee2","tx","_callee2$","_context2","populateCall","sent","populateTransaction","_x","_sendUncheckedTransaction","_callee6","_tx","_this2","promises","_from","_to","hexTx","_callee6$","_context6","from","push","_callee3","_callee3$","_context3","gasLimit","_callee4","_callee4$","_context4","estimateGas","_objectSpread","to","_callee5","_callee5$","_context5","length","all","getRpcTransaction","send","sendUncheckedTransaction","_x2","_sendTransaction","_callee8","_this3","blockNumber","hash","_callee8$","_context8","getBlockNumber","reject","timeouts","checkTx","_ref4","_callee7","_callee7$","_context7","getTransaction","replaceableTransaction","_setTimeout","pop","sendTransaction","_x3","_signTransaction","_callee9","_callee9$","_context9","signTransaction","_x4","_signMessage","_callee10","_message","message","_callee10$","_context10","signMessage","_x5","_signTypedData","_callee12","domain","types","_value","populated","_callee12$","_context12","resolveNames","_ref5","_callee11","_callee11$","_context11","_x9","JSON","stringify","getPayload","signTypedData","_x6","_x7","_x8","_unlock","_callee13","password","_callee13$","_context13","unlock","_x10","_legacySignMessage2","_callee14","_callee14$","_context14","_legacySignMessage","_x11","_options","WeakMap","_nextId","_payloads","_drainTimer","_notReady","_network","_scheduleDrain","WeakSet","JsonRpcApiProvider","_AbstractProvider","_super2","network","options","_this4","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","assign","promise","_resolve","_getOption","matches","_classPrivateFieldGet","get","_perform2","_callee15","req","feeData","request","_callee15$","_context15","method","transaction","type","maxFeePerGas","maxPriorityFeePerGas","getFeeData","undefined","getRpcRequest","args","_get","_getPrototypeOf","prototype","_perform","_x12","_detectNetwork2","_callee16","_this$nextId","_this$nextId2","payload","result","_callee16$","_context16","ready","t0","t1","t2","t3","id","params","jsonrpc","emit","action","_send","t4","error","getRpcError","_detectNetwork","_start","_this5","_callee17","_callee17$","_context17","destroyed","console","log","event","info","_classPrivateMethodGet","_scheduleDrain2","_waitUntilReady2","_callee18","_callee18$","_context18","_waitUntilReady","_getSubscriber","sub","filter","orphan","forEach","dstKey","accessList","blockTag","position","toString","signedTransaction","includeTransactions","blockHash","_error","msg","match","spelunkData","e","getBuiltinCallException","data","spelunkMessage","actionMap","eth_sign","personal_sign","eth_signTypedData_v4","eth_signTransaction","eth_sendTransaction","eth_requestAccounts","wallet_requestAccounts","reason","unsupported","details","startsWith","_this$nextId3","_this$nextId4","_this6","_getSigner","_callee19","accountsPromise","_accounts","_yield$resolvePropert","accounts","_iterator","_step","account","_callee19$","_context19","getNetwork","_createForOfIteratorHelper","s","n","done","f","finish","getSigner","_x13","_listAccounts","_callee20","_this7","_callee20$","_context20","a","listAccounts","destroy","clearTimeout","_iterator2","_step2","_step2$value","err","_this11","stallTime","payloads","_loop","batch","shift","bytes","p","unshift","_callee23","_loop2","_ret","_i","_batch","_i2","_batch2","_callee23$","_context24","_batch$_i","resp","_loop2$","_context23","r","delegateYield","_pollingInterval","JsonRpcApiPollingProvider","_JsonRpcApiProvider","_super3","_this8","subscriber","set","_this9","Number","isInteger","_forEachSubscriber","_connect","JsonRpcProvider","_JsonRpcApiPollingPro","_super4","url","_this10","clone","_getConnection","_send2","_callee21","_callee21$","_context21","_x14","_x15","_send3","_callee22","response","_callee22$","_context22","body","setHeader","assertOk","bodyJson","_x16","parse","_spelunkMessage"],"sources":["C:\\Users\\prcue\\OneDrive\\Curso 4\\TFG GITT\\5. Desarrollo\\3. Frontend\\frontend_v3\\node_modules\\ethers\\src.ts\\providers\\provider-jsonrpc.ts"],"sourcesContent":["/**\n *  One of the most common ways to interact with the blockchain is\n *  by a node running a JSON-RPC interface which can be connected to,\n *  based on the transport, using:\n *\n *  - HTTP or HTTPS - [[JsonRpcProvider]]\n *  - WebSocket - [[WebSocketProvider]]\n *  - IPC - [[IpcSocketProvider]]\n *\n * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]\n */\n\n// @TODO:\n// - Add the batching API\n\n// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false\n\nimport { AbiCoder } from \"../abi/index.js\";\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { TypedDataEncoder } from \"../hash/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nimport {\n    defineProperties, getBigInt, hexlify, isHexString, toQuantity, toUtf8Bytes,\n    makeError, assert, assertArgument,\n    FetchRequest, resolveProperties\n} from \"../utils/index.js\";\n\nimport { AbstractProvider, UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\nimport { Network } from \"./network.js\";\nimport { FilterIdEventSubscriber, FilterIdPendingSubscriber } from \"./subscriber-filterid.js\";\nimport { PollingEventSubscriber } from \"./subscriber-polling.js\";\n\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type { PerformActionRequest, Subscriber, Subscription } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\";\nimport type { Provider, TransactionRequest, TransactionResponse } from \"./provider.js\";\nimport type { Signer } from \"./signer.js\";\n\ntype Timer = ReturnType<typeof setTimeout>;\n\n\nconst Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\n//const Methods = \"getAddress,then\".split(/,/g);\nfunction deepCopy<T = any>(value: T): T {\n    if (value == null || Primitive.indexOf(typeof(value)) >= 0) {\n        return value;\n    }\n\n    // Keep any Addressable\n    if (typeof((<any>value).getAddress) === \"function\") {\n        return value;\n    }\n\n    if (Array.isArray(value)) { return <any>(value.map(deepCopy)); }\n\n    if (typeof(value) === \"object\") {\n        return Object.keys(value).reduce((accum, key) => {\n            accum[key] = (<any>value)[key];\n            return accum;\n        }, <any>{ });\n    }\n\n    throw new Error(`should not happen: ${ value } (${ typeof(value) })`);\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\ninterface Pollable {\n    pollingInterval: number;\n}\n\nfunction isPollable(value: any): value is Pollable {\n    return (value && typeof(value.pollingInterval) === \"number\");\n}\n\n/**\n *  A JSON-RPC payload, which are sent to a JSON-RPC server.\n */\nexport type JsonRpcPayload = {\n    /**\n     *  The JSON-RPC request ID.\n     */\n    id: number;\n\n    /**\n     *  The JSON-RPC request method.\n     */\n    method: string;\n\n    /**\n     *  The JSON-RPC request parameters.\n     */\n    params: Array<any> | Record<string, any>;\n\n    /**\n     *  A required constant in the JSON-RPC specification.\n     */\n    jsonrpc: \"2.0\";\n};\n\n/**\n *  A JSON-RPC result, which are returned on success from a JSON-RPC server.\n */\nexport type JsonRpcResult = {\n    /**\n     *  The response ID to match it to the relevant request.\n     */\n    id: number;\n\n    /**\n     *  The response result.\n     */\n    result: any;\n};\n\n/**\n *  A JSON-RPC error, which are returned on failure from a JSON-RPC server.\n */\nexport type JsonRpcError = {\n    /**\n     *  The response ID to match it to the relevant request.\n     */\n    id: number;\n\n    /**\n     *  The response error.\n     */\n    error: {\n        code: number;\n        message?: string;\n        data?: any;\n    }\n};\n\n/**\n *  When subscribing to the ``\"debug\"`` event, the [[Listener]] will\n *  receive this object as the first parameter.\n */\nexport type DebugEventJsonRpcApiProvider = {\n    action: \"sendRpcPayload\",\n    payload: JsonRpcPayload | Array<JsonRpcPayload>\n} | {\n    action: \"receiveRpcResult\",\n    result: Array<JsonRpcResult | JsonRpcError>\n} | {\n    action: \"receiveRpcError\",\n    error: Error\n};\n\n/**\n *  Options for configuring a [[JsonRpcApiProvider]]. Much of this\n *  is targetted towards sub-classes, which often will not expose\n *  any of these options to their consumers.\n *\n *  **``polling``** - use the polling strategy is used immediately\n *  for events; otherwise, attempt to use filters and fall back onto\n *  polling (default: ``false``)\n *\n *  **``staticNetwork``** - do not request chain ID on requests to\n *  validate the underlying chain has not changed (default: ``null``)\n *\n *  This should **ONLY** be used if it is **certain** that the network\n *  cannot change, such as when using INFURA (since the URL dictates the\n *  network). If the network is assumed static and it does change, this\n *  can have tragic consequences. For example, this **CANNOT** be used\n *  with MetaMask, since the used can select a new network from the\n *  drop-down at any time.\n *\n *  **``batchStallTime``** - how long (ms) to aggregate requests into a\n *  single batch. ``0`` indicates batching will only encompass the current\n *  event loop. If ``batchMaxCount = 1``, this is ignored. (default: ``10``)\n *\n *  **``batchMaxSize``** - target maximum size (bytes) to allow per batch\n *  request (default: 1Mb)\n *\n *  **``batchMaxCount``** - maximum number of requests to allow in a batch.\n *  If ``batchMaxCount = 1``, then batching is disabled. (default: ``100``)\n *\n *  **``cacheTimeout``** - passed as [[AbstractProviderOptions]].\n */\nexport type JsonRpcApiProviderOptions = {\n    polling?: boolean;\n    staticNetwork?: null | Network;\n    batchStallTime?: number;\n    batchMaxSize?: number;\n    batchMaxCount?: number;\n\n    cacheTimeout?: number;\n    pollingInterval?: number;\n};\n\nconst defaultOptions = {\n    polling: false,\n    staticNetwork: null,\n\n    batchStallTime: 10,      // 10ms\n    batchMaxSize: (1 << 20), // 1Mb\n    batchMaxCount: 100,      // 100 requests\n\n    cacheTimeout: 250,\n    pollingInterval: 4000\n}\n\n/**\n *  A **JsonRpcTransactionRequest** is formatted as needed by the JSON-RPC\n *  Ethereum API specification.\n */\nexport interface JsonRpcTransactionRequest {\n     /**\n      *  The sender address to use when signing.\n      */\n     from?: string;\n\n     /**\n      *  The target address.\n      */\n     to?: string;\n\n     /**\n      *  The transaction data.\n      */\n     data?: string;\n\n     /**\n      *  The chain ID the transaction is valid on.\n      */\n     chainId?: string;\n\n     /**\n      *  The [[link-eip-2718]] transaction type.\n      */\n     type?: string;\n\n     /**\n      *  The maximum amount of gas to allow a transaction to consume.\n      *\n      *  In most other places in ethers, this is called ``gasLimit`` which\n      *  differs from the JSON-RPC Ethereum API specification.\n      */\n     gas?: string;\n\n     /**\n      *  The gas price per wei for transactions prior to [[link-eip-1559]].\n      */\n     gasPrice?: string;\n\n     /**\n      *  The maximum fee per gas for [[link-eip-1559]] transactions.\n      */\n     maxFeePerGas?: string;\n\n     /**\n      *  The maximum priority fee per gas for [[link-eip-1559]] transactions.\n      */\n     maxPriorityFeePerGas?: string;\n\n     /**\n      *  The nonce for the transaction.\n      */\n     nonce?: string;\n\n     /**\n      *  The transaction value (in wei).\n      */\n     value?: string;\n\n     /**\n      *  The transaction access list.\n      */\n     accessList?: Array<{ address: string, storageKeys: Array<string> }>;\n}\n\n// @TODO: Unchecked Signers\n\nexport class JsonRpcSigner extends AbstractSigner<JsonRpcApiProvider> {\n    address!: string;\n\n    constructor(provider: JsonRpcApiProvider, address: string) {\n        super(provider);\n        address = getAddress(address);\n        defineProperties<JsonRpcSigner>(this, { address });\n    }\n\n    connect(provider: null | Provider): Signer {\n        assert(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"signer.connect\"\n        });\n    }\n\n    async getAddress(): Promise<string> {\n        return this.address;\n    }\n\n    // JSON-RPC will automatially fill in nonce, etc. so we just check from\n    async populateTransaction(tx: TransactionRequest): Promise<TransactionLike<string>> {\n        return await this.populateCall(tx);\n    }\n\n    // Returns just the hash of the transaction after sent, which is what\n    // the bare JSON-RPC API does;\n    async sendUncheckedTransaction(_tx: TransactionRequest): Promise<string> {\n        const tx = deepCopy(_tx);\n\n        const promises: Array<Promise<void>> = [];\n\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const _from = tx.from;\n            promises.push((async () => {\n                const from = await resolveAddress(_from, this.provider);\n                assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(),\n                    \"from address mismatch\", \"transaction\", _tx);\n                tx.from = from;\n            })());\n        } else {\n            tx.from = this.address;\n        }\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (tx.gasLimit == null) {\n            promises.push((async () => {\n                tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address});\n            })());\n        }\n\n        // The address may be an ENS name or Addressable\n        if (tx.to != null) {\n            const _to = tx.to;\n            promises.push((async () => {\n                tx.to = await resolveAddress(_to, this.provider);\n            })());\n        }\n\n        // Wait until all of our properties are filled in\n        if (promises.length) { await Promise.all(promises); }\n\n        const hexTx = this.provider.getRpcTransaction(tx);\n\n        return this.provider.send(\"eth_sendTransaction\", [ hexTx ]);\n    }\n\n    async sendTransaction(tx: TransactionRequest): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider.getBlockNumber();\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(tx);\n\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return await (new Promise((resolve, reject) => {\n            const timeouts = [ 1000, 100 ];\n            const checkTx = async () => {\n                // Try getting the transaction\n                const tx = await this.provider.getTransaction(hash);\n                if (tx != null) {\n                    resolve(tx.replaceableTransaction(blockNumber));\n                    return;\n                }\n\n                // Wait another 4 seconds\n                this.provider._setTimeout(() => { checkTx(); }, timeouts.pop() || 4000);\n            };\n            checkTx();\n        }));\n    }\n\n    async signTransaction(_tx: TransactionRequest): Promise<string> {\n        const tx = deepCopy(_tx);\n\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const from = await resolveAddress(tx.from, this.provider);\n            assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(),\n                \"from address mismatch\", \"transaction\", _tx);\n            tx.from = from;\n        } else {\n            tx.from = this.address;\n        }\n\n        const hexTx = this.provider.getRpcTransaction(tx);\n        return await this.provider.send(\"eth_signTransaction\", [ hexTx ]);\n    }\n\n\n    async signMessage(_message: string | Uint8Array): Promise<string> {\n        const message = ((typeof(_message) === \"string\") ? toUtf8Bytes(_message): _message);\n        return await this.provider.send(\"personal_sign\", [\n            hexlify(message), this.address.toLowerCase() ]);\n    }\n\n    async signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, _value: Record<string, any>): Promise<string> {\n        const value = deepCopy(_value);\n\n        // Populate any ENS names (in-place)\n        const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (value: string) => {\n            const address = await resolveAddress(value);\n            assertArgument(address != null, \"TypedData does not support null address\", \"value\", value);\n            return address;\n        });\n\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            this.address.toLowerCase(),\n            JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        return this.provider.send(\"personal_unlockAccount\", [\n            this.address.toLowerCase(), password, null ]);\n    }\n\n    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n    async _legacySignMessage(_message: string | Uint8Array): Promise<string> {\n        const message = ((typeof(_message) === \"string\") ? toUtf8Bytes(_message): _message);\n        return await this.provider.send(\"eth_sign\", [\n            this.address.toLowerCase(), hexlify(message) ]);\n    }\n}\n\ntype ResolveFunc = (result: JsonRpcResult) => void;\ntype RejectFunc = (error: Error) => void;\n\ntype Payload = { payload: JsonRpcPayload, resolve: ResolveFunc, reject: RejectFunc };\n\n/**\n *  The JsonRpcApiProvider is an abstract class and **MUST** be\n *  sub-classed.\n *\n *  It provides the base for all JSON-RPC-based Provider interaction.\n *\n *  Sub-classing Notes:\n *  - a sub-class MUST override _send\n *  - a sub-class MUST call the `_start()` method once connected\n */\nexport abstract class JsonRpcApiProvider extends AbstractProvider {\n\n    #options: Required<JsonRpcApiProviderOptions>;\n\n    // The next ID to use for the JSON-RPC ID field\n    #nextId: number;\n\n    // Payloads are queued and triggered in batches using the drainTimer\n    #payloads: Array<Payload>;\n    #drainTimer: null | Timer;\n\n    #notReady: null | {\n        promise: Promise<void>,\n        resolve: null | ((v: void) => void)\n    };\n\n    #network: null | Network;\n\n    #scheduleDrain(): void {\n        if (this.#drainTimer) { return; }\n\n        // If we aren't using batching, no hard in sending it immeidately\n        const stallTime = (this._getOption(\"batchMaxCount\") === 1) ? 0: this._getOption(\"batchStallTime\");\n\n        this.#drainTimer = setTimeout(() => {\n            this.#drainTimer = null;\n\n            const payloads = this.#payloads;\n            this.#payloads = [ ];\n\n            while (payloads.length) {\n\n                // Create payload batches that satisfy our batch constraints\n                const batch = [ <Payload>(payloads.shift()) ];\n                while (payloads.length) {\n                    if (batch.length === this.#options.batchMaxCount) { break; }\n                    batch.push(<Payload>(payloads.shift()));\n                    const bytes = JSON.stringify(batch.map((p) => p.payload));\n                    if (bytes.length > this.#options.batchMaxSize) {\n                        payloads.unshift(<Payload>(batch.pop()));\n                        break;\n                    }\n                }\n\n                // Process the result to each payload\n                (async () => {\n                    const payload = ((batch.length === 1) ? batch[0].payload: batch.map((p) => p.payload));\n\n                    this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\n\n                    try {\n                        const result = await this._send(payload);\n                        this.emit(\"debug\", { action: \"receiveRpcResult\", result });\n\n                        // Process results in batch order\n                        for (const { resolve, reject, payload } of batch) {\n\n                            if (this.destroyed) {\n                                reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\n                                continue;\n                            }\n\n                            // Find the matching result\n                            const resp = result.filter((r) => (r.id === payload.id))[0];\n\n                            // No result; the node failed us in unexpected ways\n                            if (resp == null) {\n                                const error = makeError(\"missing response for request\", \"BAD_DATA\", {\n                                    value: result, info: { payload }\n                                });\n                                this.emit(\"error\", error);\n                                reject(error);\n                                continue;\n                            }\n\n                            // The response is an error\n                            if (\"error\" in resp) {\n                                reject(this.getRpcError(payload, resp));\n                                continue;\n                            }\n\n                            // All good; send the result\n                            resolve(resp.result);\n                        }\n\n                    } catch (error: any) {\n                        this.emit(\"debug\", { action: \"receiveRpcError\", error });\n\n                        for (const { reject } of batch) {\n                            // @TODO: augment the error with the payload\n                            reject(error);\n                        }\n                    }\n                })();\n            }\n        }, stallTime);\n    }\n\n    constructor(network?: Networkish, options?: JsonRpcApiProviderOptions) {\n        super(network, options);\n\n        this.#nextId = 1;\n        this.#options = Object.assign({ }, defaultOptions, options || { });\n\n        this.#payloads = [ ];\n        this.#drainTimer = null;\n\n        this.#network = null;\n\n        {\n            let resolve: null | ((value: void) => void) = null;\n            const promise = new Promise((_resolve: (value: void) => void) => {\n                resolve = _resolve;\n            });\n            this.#notReady = { promise, resolve };\n        }\n\n        // Make sure any static network is compatbile with the provided netwrok\n        const staticNetwork = this._getOption(\"staticNetwork\");\n        if (staticNetwork) {\n            assertArgument(network == null || staticNetwork.matches(network),\n                \"staticNetwork MUST match network object\", \"options\", options);\n            this.#network = staticNetwork;\n        }\n    }\n\n    /**\n     *  Returns the value associated with the option %%key%%.\n     *\n     *  Sub-classes can use this to inquire about configuration options.\n     */\n    _getOption<K extends keyof JsonRpcApiProviderOptions>(key: K): JsonRpcApiProviderOptions[K] {\n        return this.#options[key];\n    }\n\n    /**\n     *  Gets the [[Network]] this provider has committed to. On each call, the network\n     *  is detected, and if it has changed, the call will reject.\n     */\n    get _network(): Network {\n        assert (this.#network, \"network is not available yet\", \"NETWORK_ERROR\");\n        return this.#network;\n    }\n\n    /**\n     *  Sends a JSON-RPC %%payload%% (or a batch) to the underlying channel.\n     *\n     *  Sub-classes **MUST** override this.\n     */\n    abstract _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult | JsonRpcError>>;\n\n\n    /**\n     *  Resolves to the non-normalized value by performing %%req%%.\n     *\n     *  Sub-classes may override this to modify behavior of actions,\n     *  and should generally call ``super._perform`` as a fallback.\n     */\n    async _perform(req: PerformActionRequest): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            let tx = req.transaction;\n            if (tx && tx.type != null && getBigInt(tx.type)) {\n                // If there are no EIP-1559 properties, it might be non-EIP-a559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        req = Object.assign({ }, req, {\n                            transaction: Object.assign({ }, tx, { type: undefined })\n                        });\n                    }\n                }\n            }\n        }\n\n        const request = this.getRpcRequest(req);\n\n        if (request != null) {\n            return await this.send(request.method, request.args);\n        }\n\n        return super._perform(req);\n    }\n\n    /**\n     *  Sub-classes may override this; it detects the *actual* network that\n     *  we are **currently** connected to.\n     *\n     *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\n     *  _send primitive must be used instead.\n     */\n    async _detectNetwork(): Promise<Network> {\n        const network = this._getOption(\"staticNetwork\");\n        if (network) { return network; }\n\n        // If we are ready, use ``send``, which enabled requests to be batched\n        if (this.ready) {\n            return Network.from(getBigInt(await this.send(\"eth_chainId\", [ ])));\n        }\n\n        // We are not ready yet; use the primitive _send\n\n        const payload: JsonRpcPayload = {\n            id: this.#nextId++, method: \"eth_chainId\", params: [ ], jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\n\n        let result: JsonRpcResult | JsonRpcError;\n        try {\n            result = (await this._send(payload))[0];\n        } catch (error) {\n            this.emit(\"debug\", { action: \"receiveRpcError\", error });\n            throw error;\n        }\n\n        this.emit(\"debug\", { action: \"receiveRpcResult\", result });\n\n        if (\"result\" in result) {\n            return Network.from(getBigInt(result.result));\n        }\n\n        throw this.getRpcError(payload, result);\n    }\n\n    /**\n     *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\n     *  will be passed to [[_send]] from [[send]]. If it is overridden, then\n     *  ``super._start()`` **MUST** be called.\n     *\n     *  Calling it multiple times is safe and has no effect.\n     */\n    _start(): void {\n        if (this.#notReady == null || this.#notReady.resolve == null) { return; }\n\n        this.#notReady.resolve();\n        this.#notReady = null;\n\n        (async () => {\n\n            // Bootstrap the network\n            while (this.#network == null && !this.destroyed) {\n                try {\n                    this.#network = await this._detectNetwork();\n                } catch (error) {\n                    if (this.destroyed) { break; }\n                    console.log(\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\");\n                    this.emit(\"error\", makeError(\"failed to bootstrap network detection\", \"NETWORK_ERROR\", { event: \"initial-network-discovery\", info: { error } }));\n                    await stall(1000);\n                }\n            }\n\n            // Start dispatching requests\n            this.#scheduleDrain();\n        })();\n    }\n\n    /**\n     *  Resolves once the [[_start]] has been called. This can be used in\n     *  sub-classes to defer sending data until the connection has been\n     *  established.\n     */\n    async _waitUntilReady(): Promise<void> {\n        if (this.#notReady == null) { return; }\n        return await this.#notReady.promise;\n    }\n\n\n    /**\n     *  Return a Subscriber that will manage the %%sub%%.\n     *\n     *  Sub-classes may override this to modify the behavior of\n     *  subscription management.\n     */\n    _getSubscriber(sub: Subscription): Subscriber {\n\n        // Pending Filters aren't availble via polling\n        if (sub.type === \"pending\") { return new FilterIdPendingSubscriber(this); }\n\n        if (sub.type === \"event\") {\n            if (this._getOption(\"polling\")) {\n                return new PollingEventSubscriber(this, sub.filter);\n            }\n            return new FilterIdEventSubscriber(this, sub.filter);\n        }\n\n        // Orphaned Logs are handled automatically, by the filter, since\n        // logs with removed are emitted by it\n        if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\n            return new UnmanagedSubscriber(\"orphan\");\n        }\n\n        return super._getSubscriber(sub);\n    }\n\n    /**\n     *  Returns true only if the [[_start]] has been called.\n     */\n    get ready(): boolean { return this.#notReady == null; }\n\n    /**\n     *  Returns %%tx%% as a normalized JSON-RPC transaction request,\n     *  which has all values hexlified and any numeric values converted\n     *  to Quantity values.\n     */\n    getRpcTransaction(tx: TransactionRequest): JsonRpcTransactionRequest {\n        const result: JsonRpcTransactionRequest = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            let dstKey = key;\n            if (key === \"gasLimit\") { dstKey = \"gas\"; }\n            (<any>result)[dstKey] = toQuantity(getBigInt((<any>tx)[key], `tx.${ key }`));\n        });\n\n        // Make sure addresses and data are lowercase\n        [\"from\", \"to\", \"data\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            (<any>result)[key] = hexlify((<any>tx)[key]);\n        });\n\n        // Normalize the access list object\n        if (tx.accessList) {\n            result[\"accessList\"] = accessListify(tx.accessList);\n        }\n\n        return result;\n    }\n\n    /**\n     *  Returns the request method and arguments required to perform\n     *  %%req%%.\n     */\n    getRpcRequest(req: PerformActionRequest): null | { method: string, args: Array<any> } {\n        switch (req.method) {\n            case \"chainId\":\n                return { method: \"eth_chainId\", args: [ ] };\n\n            case \"getBlockNumber\":\n                return { method: \"eth_blockNumber\", args: [ ] };\n\n            case \"getGasPrice\":\n                return { method: \"eth_gasPrice\", args: [] };\n\n            case \"getBalance\":\n                return {\n                    method: \"eth_getBalance\",\n                    args: [ getLowerCase(req.address), req.blockTag ]\n                };\n\n            case \"getTransactionCount\":\n                return {\n                    method: \"eth_getTransactionCount\",\n                    args: [ getLowerCase(req.address), req.blockTag ]\n                };\n\n            case \"getCode\":\n                return {\n                    method: \"eth_getCode\",\n                    args: [ getLowerCase(req.address), req.blockTag ]\n                };\n\n            case \"getStorage\":\n                return {\n                    method: \"eth_getStorageAt\",\n                    args: [\n                        getLowerCase(req.address),\n                        (\"0x\" + req.position.toString(16)),\n                        req.blockTag\n                    ]\n                };\n\n            case \"broadcastTransaction\":\n                return {\n                    method: \"eth_sendRawTransaction\",\n                    args: [ req.signedTransaction ]\n                };\n\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return {\n                        method: \"eth_getBlockByNumber\",\n                        args: [ req.blockTag, !!req.includeTransactions ]\n                    };\n                } else if (\"blockHash\" in req) {\n                    return {\n                        method: \"eth_getBlockByHash\",\n                        args: [ req.blockHash, !!req.includeTransactions ]\n                    };\n                }\n                break;\n\n            case \"getTransaction\":\n                return {\n                    method: \"eth_getTransactionByHash\",\n                    args: [ req.hash ]\n                };\n\n            case \"getTransactionReceipt\":\n                return {\n                    method: \"eth_getTransactionReceipt\",\n                    args: [ req.hash ]\n                };\n\n            case \"call\":\n                return {\n                    method: \"eth_call\",\n                    args: [ this.getRpcTransaction(req.transaction), req.blockTag ]\n                };\n\n            case \"estimateGas\": {\n                return {\n                    method: \"eth_estimateGas\",\n                    args: [ this.getRpcTransaction(req.transaction) ]\n                };\n            }\n\n            case \"getLogs\":\n                if (req.filter && req.filter.address != null) {\n                    if (Array.isArray(req.filter.address)) {\n                        req.filter.address = req.filter.address.map(getLowerCase);\n                    } else {\n                        req.filter.address = getLowerCase(req.filter.address);\n                    }\n                }\n                return { method: \"eth_getLogs\", args: [ req.filter ] };\n        }\n\n        return null;\n    }\n\n    /**\n     *  Returns an ethers-style Error for the given JSON-RPC error\n     *  %%payload%%, coalescing the various strings and error shapes\n     *  that different nodes return, coercing them into a machine-readable\n     *  standardized error.\n     */\n    getRpcError(payload: JsonRpcPayload, _error: JsonRpcError): Error {\n        const { method } = payload;\n        const { error } = _error;\n\n        if (method === \"eth_estimateGas\" && error.message) {\n            const msg = error.message;\n            if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\n                return makeError(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: ((<any>payload).params[0]),\n                    info: { payload, error }\n                });\n            }\n        }\n\n        if (method === \"eth_call\" || method === \"eth_estimateGas\") {\n            const result = spelunkData(error);\n\n            const e = AbiCoder.getBuiltinCallException(\n                (method === \"eth_call\") ? \"call\": \"estimateGas\",\n                ((<any>payload).params[0]),\n                (result ? result.data: null)\n            );\n            e.info = { error, payload };\n            return e;\n        }\n\n        // Only estimateGas and call can return arbitrary contract-defined text, so now we\n        // we can process text safely.\n\n        const message = JSON.stringify(spelunkMessage(error));\n\n        if (typeof(error.message) === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\n            const actionMap: Record<string, \"requestAccess\" | \"sendTransaction\" | \"signMessage\" | \"signTransaction\" | \"signTypedData\"> = {\n                eth_sign: \"signMessage\",\n                personal_sign: \"signMessage\",\n                eth_signTypedData_v4: \"signTypedData\",\n                eth_signTransaction: \"signTransaction\",\n                eth_sendTransaction: \"sendTransaction\",\n                eth_requestAccounts: \"requestAccess\",\n                wallet_requestAccounts: \"requestAccess\",\n            };\n\n            return makeError(`user rejected action`, \"ACTION_REJECTED\", {\n                action: (actionMap[method] || \"unknown\") ,\n                reason: \"rejected\",\n                info: { payload, error }\n            });\n        }\n\n        if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\n            const transaction = <TransactionLike<string>>((<any>payload).params[0]);\n\n            if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n                return makeError(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                    transaction, info: { error }\n                });\n            }\n\n            if (message.match(/nonce/i) && message.match(/too low/i)) {\n                return makeError(\"nonce has already been used\", \"NONCE_EXPIRED\", { transaction, info: { error } });\n            }\n\n            // \"replacement transaction underpriced\"\n            if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\n                return makeError(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", { transaction, info: { error } });\n            }\n\n            if (message.match(/only replay-protected/i)) {\n                return makeError(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\n                    operation: method, info: { transaction, info: { error } }\n                });\n            }\n        }\n\n        let unsupported = !!message.match(/the method .* does not exist/i);\n        if (!unsupported) {\n            if (error && (<any>error).details && (<any>error).details.startsWith(\"Unauthorized method:\")) {\n                unsupported = true;\n            }\n        }\n\n        if (unsupported) {\n            return makeError(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\n                operation: payload.method, info: { error, payload }\n            });\n        }\n\n        return makeError(\"could not coalesce error\", \"UNKNOWN_ERROR\", { error, payload });\n    }\n\n\n    /**\n     *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\n     *  over the underlying channel. This can be used to call methods\n     *  on the backend that do not have a high-level API within the Provider\n     *  API.\n     *\n     *  This method queues requests according to the batch constraints\n     *  in the options, assigns the request a unique ID.\n     *\n     *  **Do NOT override** this method in sub-classes; instead\n     *  override [[_send]] or force the options values in the\n     *  call to the constructor to modify this method's behavior.\n     */\n    send(method: string, params: Array<any> | Record<string, any>): Promise<any> {\n        // @TODO: cache chainId?? purge on switch_networks\n\n        // We have been destroyed; no operations are supported anymore\n        if (this.destroyed) {\n            return Promise.reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: method }));\n        }\n\n        const id = this.#nextId++;\n        const promise = new Promise((resolve, reject) => {\n            this.#payloads.push({\n                resolve, reject,\n                payload: { method, params, id, jsonrpc: \"2.0\" }\n            });\n        });\n\n        // If there is not a pending drainTimer, set one\n        this.#scheduleDrain();\n\n        return <Promise<JsonRpcResult>>promise;\n    }\n\n    /**\n     *  Resolves to the [[Signer]] account for  %%address%% managed by\n     *  the client.\n     *\n     *  If the %%address%% is a number, it is used as an index in the\n     *  the accounts from [[listAccounts]].\n     *\n     *  This can only be used on clients which manage accounts (such as\n     *  Geth with imported account or MetaMask).\n     *\n     *  Throws if the account doesn't exist.\n     */\n    async getSigner(address?: number | string): Promise<JsonRpcSigner> {\n        if (address == null) { address = 0; }\n\n        const accountsPromise = this.send(\"eth_accounts\", [ ]);\n\n        // Account index\n        if (typeof(address) === \"number\") {\n            const accounts = <Array<string>>(await accountsPromise);\n            if (address >= accounts.length) { throw new Error(\"no such account\"); }\n            return new JsonRpcSigner(this, accounts[address]);\n        }\n\n        const { accounts } = await resolveProperties({\n            network: this.getNetwork(),\n            accounts: accountsPromise\n        });\n\n        // Account address\n        address = getAddress(address);\n        for (const account of accounts) {\n            if (getAddress(account) === address) {\n                return new JsonRpcSigner(this, address);\n            }\n        }\n\n        throw new Error(\"invalid account\");\n    }\n\n    async listAccounts(): Promise<Array<JsonRpcSigner>> {\n        const accounts: Array<string> = await this.send(\"eth_accounts\", [ ]);\n        return accounts.map((a) => new JsonRpcSigner(this, a));\n    }\n\n    destroy(): void {\n\n        // Stop processing requests\n        if (this.#drainTimer) {\n            clearTimeout(this.#drainTimer);\n            this.#drainTimer = null;\n        }\n\n        // Cancel all pending requests\n        for (const { payload, reject } of this.#payloads) {\n            reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\n        }\n\n        this.#payloads = [ ];\n\n        // Parent clean-up\n        super.destroy();\n\n    }\n}\n\n// @TODO: remove this in v7, it is not exported because this functionality\n// is exposed in the JsonRpcApiProvider by setting polling to true. It should\n// be safe to remove regardless, because it isn't reachable, but just in case.\n/**\n *  @_ignore:\n */\nexport abstract class JsonRpcApiPollingProvider extends JsonRpcApiProvider {\n    #pollingInterval: number;\n    constructor(network?: Networkish, options?: JsonRpcApiProviderOptions) {\n        super(network, options);\n\n        this.#pollingInterval = 4000;\n    }\n\n    _getSubscriber(sub: Subscription): Subscriber {\n        const subscriber = super._getSubscriber(sub);\n        if (isPollable(subscriber)) {\n            subscriber.pollingInterval = this.#pollingInterval;\n        }\n        return subscriber;\n    }\n\n    /**\n     *  The polling interval (default: 4000 ms)\n     */\n    get pollingInterval(): number { return this.#pollingInterval; }\n    set pollingInterval(value: number) {\n        if (!Number.isInteger(value) || value < 0) { throw new Error(\"invalid interval\"); }\n        this.#pollingInterval = value;\n        this._forEachSubscriber((sub) => {\n            if (isPollable(sub)) {\n                sub.pollingInterval = this.#pollingInterval;\n            }\n        });\n    }\n}\n\n/**\n *  The JsonRpcProvider is one of the most common Providers,\n *  which performs all operations over HTTP (or HTTPS) requests.\n *\n *  Events are processed by polling the backend for the current block\n *  number; when it advances, all block-base events are then checked\n *  for updates.\n */\nexport class JsonRpcProvider extends JsonRpcApiPollingProvider {\n    #connect: FetchRequest;\n\n    constructor(url?: string | FetchRequest, network?: Networkish, options?: JsonRpcApiProviderOptions) {\n        if (url == null) { url = \"http:/\\/localhost:8545\"; }\n        super(network, options);\n\n        if (typeof(url) === \"string\") {\n            this.#connect = new FetchRequest(url);\n        } else {\n            this.#connect = url.clone();\n        }\n    }\n\n    _getConnection(): FetchRequest {\n        return this.#connect.clone();\n    }\n\n    async send(method: string, params: Array<any> | Record<string, any>): Promise<any> {\n        // All requests are over HTTP, so we can just start handling requests\n        // We do this here rather than the constructor so that we don't send any\n        // requests to the network (i.e. eth_chainId) until we absolutely have to.\n        await this._start();\n\n        return await super.send(method, params);\n    }\n\n    async _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult>> {\n        // Configure a POST connection for the requested method\n        const request = this._getConnection();\n        request.body = JSON.stringify(payload);\n        request.setHeader(\"content-type\", \"application/json\");\n\n        const response = await request.send();\n        response.assertOk();\n\n        let resp = response.bodyJson;\n        if (!Array.isArray(resp)) { resp = [ resp ]; }\n\n        return resp;\n    }\n}\n\nfunction spelunkData(value: any): null | { message: string, data: string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(/revert/i) && isHexString(value.data)) {\n        return { message: value.message, data: value.data };\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunkData(value[key]);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunkData(JSON.parse(value));\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction _spelunkMessage(value: any, result: Array<string>): void {\n    if (value == null) { return; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\") {\n        result.push(value.message);\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            _spelunkMessage(value[key], result);\n        }\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return _spelunkMessage(JSON.parse(value), result);\n        } catch (error) { }\n    }\n}\n\nfunction spelunkMessage(value: any): Array<string> {\n    const result: Array<string> = [ ];\n    _spelunkMessage(value, result);\n    return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}