{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"C:/Users/prcue/OneDrive/Curso 4/TFG GITT/5. Desarrollo/3. Frontend/frontend_v3/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\n/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, assert, assertArgument } from \"../utils/index.js\";\nimport { EnsPlugin, FetchUrlFeeDataNetworkPlugin, GasCostPlugin } from \"./plugins-network.js\";\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\nvar Networks = new Map();\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nvar _name = /*#__PURE__*/new WeakMap();\nvar _chainId = /*#__PURE__*/new WeakMap();\nvar _plugins = /*#__PURE__*/new WeakMap();\nexport var Network = /*#__PURE__*/function () {\n  /**\n   *  Creates a new **Network** for %%name%% and %%chainId%%.\n   */\n  function Network(name, chainId) {\n    _classCallCheck(this, Network);\n    _classPrivateFieldInitSpec(this, _name, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _chainId, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _plugins, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _name, name);\n    _classPrivateFieldSet(this, _chainId, getBigInt(chainId));\n    _classPrivateFieldSet(this, _plugins, new Map());\n  }\n  /**\n   *  Returns a JSON-compatible representation of a Network.\n   */\n  _createClass(Network, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        name: this.name,\n        chainId: String(this.chainId)\n      };\n    }\n    /**\n     *  The network common name.\n     *\n     *  This is the canonical name, as networks migh have multiple\n     *  names.\n     */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _name);\n    },\n    set: function set(value) {\n      _classPrivateFieldSet(this, _name, value);\n    }\n    /**\n     *  The network chain ID.\n     */\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _chainId);\n    },\n    set: function set(value) {\n      _classPrivateFieldSet(this, _chainId, getBigInt(value, \"chainId\"));\n    }\n    /**\n     *  Returns true if %%other%% matches this network. Any chain ID\n     *  must match, and if no chain ID is present, the name must match.\n     *\n     *  This method does not currently check for additional properties,\n     *  such as ENS address or plug-in compatibility.\n     */\n  }, {\n    key: \"matches\",\n    value: function matches(other) {\n      if (other == null) {\n        return false;\n      }\n      if (typeof other === \"string\") {\n        try {\n          return this.chainId === getBigInt(other);\n        } catch (error) {}\n        return this.name === other;\n      }\n      if (typeof other === \"number\" || typeof other === \"bigint\") {\n        try {\n          return this.chainId === getBigInt(other);\n        } catch (error) {}\n        return false;\n      }\n      if (typeof other === \"object\") {\n        if (other.chainId != null) {\n          try {\n            return this.chainId === getBigInt(other.chainId);\n          } catch (error) {}\n          return false;\n        }\n        if (other.name != null) {\n          return this.name === other.name;\n        }\n        return false;\n      }\n      return false;\n    }\n    /**\n     *  Returns the list of plugins currently attached to this Network.\n     */\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      return Array.from(_classPrivateFieldGet(this, _plugins).values());\n    }\n    /**\n     *  Attach a new %%plugin%% to this Network. The network name\n     *  must be unique, excluding any fragment.\n     */\n  }, {\n    key: \"attachPlugin\",\n    value: function attachPlugin(plugin) {\n      if (_classPrivateFieldGet(this, _plugins).get(plugin.name)) {\n        throw new Error(\"cannot replace existing plugin: \".concat(plugin.name, \" \"));\n      }\n      _classPrivateFieldGet(this, _plugins).set(plugin.name, plugin.clone());\n      return this;\n    }\n    /**\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\n     *  with fragments will not be returned unless %%name%% includes\n     *  a fragment.\n     */\n  }, {\n    key: \"getPlugin\",\n    value: function getPlugin(name) {\n      return _classPrivateFieldGet(this, _plugins).get(name) || null;\n    }\n    /**\n     *  Gets a list of all plugins that match %%name%%, with otr without\n     *  a fragment.\n     */\n  }, {\n    key: \"getPlugins\",\n    value: function getPlugins(basename) {\n      return this.plugins.filter(function (p) {\n        return p.name.split(\"#\")[0] === basename;\n      });\n    }\n    /**\n     *  Create a copy of this Network.\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = new Network(this.name, this.chainId);\n      this.plugins.forEach(function (plugin) {\n        clone.attachPlugin(plugin.clone());\n      });\n      return clone;\n    }\n    /**\n     *  Compute the intrinsic gas required for a transaction.\n     *\n     *  A GasCostPlugin can be attached to override the default\n     *  values.\n     */\n  }, {\n    key: \"computeIntrinsicGas\",\n    value: function computeIntrinsicGas(tx) {\n      var costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || new GasCostPlugin();\n      var gas = costs.txBase;\n      if (tx.to == null) {\n        gas += costs.txCreate;\n      }\n      if (tx.data) {\n        for (var i = 2; i < tx.data.length; i += 2) {\n          if (tx.data.substring(i, i + 2) === \"00\") {\n            gas += costs.txDataZero;\n          } else {\n            gas += costs.txDataNonzero;\n          }\n        }\n      }\n      if (tx.accessList) {\n        var accessList = accessListify(tx.accessList);\n        for (var addr in accessList) {\n          gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n        }\n      }\n      return gas;\n    }\n    /**\n     *  Returns a new Network for the %%network%% name or chainId.\n     */\n  }], [{\n    key: \"from\",\n    value: function from(network) {\n      injectCommonNetworks();\n      // Default network\n      if (network == null) {\n        return Network.from(\"mainnet\");\n      }\n      // Canonical name or chain ID\n      if (typeof network === \"number\") {\n        network = BigInt(network);\n      }\n      if (typeof network === \"string\" || typeof network === \"bigint\") {\n        var networkFunc = Networks.get(network);\n        if (networkFunc) {\n          return networkFunc();\n        }\n        if (typeof network === \"bigint\") {\n          return new Network(\"unknown\", network);\n        }\n        assertArgument(false, \"unknown network\", \"network\", network);\n      }\n      // Clonable with network-like abilities\n      if (typeof network.clone === \"function\") {\n        var clone = network.clone();\n        //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n        //}\n        return clone;\n      }\n      // Networkish\n      if (typeof network === \"object\") {\n        assertArgument(typeof network.name === \"string\" && typeof network.chainId === \"number\", \"invalid network object name or chainId\", \"network\", network);\n        var custom = new Network(network.name, network.chainId);\n        if (network.ensAddress || network.ensNetwork != null) {\n          custom.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));\n        }\n        //if ((<any>network).layerOneConnection) {\n        //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n        //}\n        return custom;\n      }\n      assertArgument(false, \"invalid network\", \"network\", network);\n    }\n    /**\n     *  Register %%nameOrChainId%% with a function which returns\n     *  an instance of a Network representing that chain.\n     */\n  }, {\n    key: \"register\",\n    value: function register(nameOrChainId, networkFunc) {\n      if (typeof nameOrChainId === \"number\") {\n        nameOrChainId = BigInt(nameOrChainId);\n      }\n      var existing = Networks.get(nameOrChainId);\n      if (existing) {\n        assertArgument(false, \"conflicting network for \".concat(JSON.stringify(existing.name)), \"nameOrChainId\", nameOrChainId);\n      }\n      Networks.set(nameOrChainId, networkFunc);\n    }\n  }]);\n  return Network;\n}();\n// We don't want to bring in formatUnits because it is backed by\n// FixedNumber and we want to keep Networks tiny. The values\n// included by the Gas Stations are also IEEE 754 with lots of\n// rounding issues and exceed the strict checks formatUnits has.\nfunction parseUnits(_value, decimals) {\n  var value = String(_value);\n  if (!value.match(/^[0-9.]+$/)) {\n    throw new Error(\"invalid gwei value: \".concat(_value));\n  }\n  // Break into [ whole, fraction ]\n  var comps = value.split(\".\");\n  if (comps.length === 1) {\n    comps.push(\"\");\n  }\n  // More than 1 decimal point or too many fractional positions\n  if (comps.length !== 2) {\n    throw new Error(\"invalid gwei value: \".concat(_value));\n  }\n  // Pad the fraction to 9 decimalplaces\n  while (comps[1].length < decimals) {\n    comps[1] += \"0\";\n  }\n  // Too many decimals and some non-zero ending, take the ceiling\n  if (comps[1].length > 9) {\n    var frac = BigInt(comps[1].substring(0, 9));\n    if (!comps[1].substring(9).match(/^0+$/)) {\n      frac++;\n    }\n    comps[1] = frac.toString();\n  }\n  return BigInt(comps[0] + comps[1]);\n}\n// Used by Polygon to use a gas station for fee data\nfunction getGasStationPlugin(url) {\n  return new FetchUrlFeeDataNetworkPlugin(url, /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fetchFeeData, provider, request) {\n      var response, _yield$Promise$all, _yield$Promise$all2, _response, _feeData, payload, feeData;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // Prevent Cloudflare from blocking our request in node.js\n            request.setHeader(\"User-Agent\", \"ethers\");\n            _context.prev = 1;\n            _context.next = 4;\n            return Promise.all([request.send(), fetchFeeData()]);\n          case 4:\n            _yield$Promise$all = _context.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            _response = _yield$Promise$all2[0];\n            _feeData = _yield$Promise$all2[1];\n            response = _response;\n            payload = response.bodyJson.standard;\n            feeData = {\n              gasPrice: _feeData.gasPrice,\n              maxFeePerGas: parseUnits(payload.maxFee, 9),\n              maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9)\n            };\n            return _context.abrupt(\"return\", feeData);\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](1);\n            assert(false, \"error encountered with polygon gas station (\".concat(JSON.stringify(request.url), \")\"), \"SERVER_ERROR\", {\n              request: request,\n              response: response,\n              error: _context.t0\n            });\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[1, 14]]);\n    }));\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}\n// Used by Optimism for a custom priority fee\nfunction getPriorityFeePlugin(maxPriorityFeePerGas) {\n  return new FetchUrlFeeDataNetworkPlugin(\"data:\", /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(fetchFeeData, provider, request) {\n      var feeData, baseFee;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetchFeeData();\n          case 2:\n            feeData = _context2.sent;\n            if (!(feeData.maxFeePerGas == null || feeData.maxPriorityFeePerGas == null)) {\n              _context2.next = 5;\n              break;\n            }\n            return _context2.abrupt(\"return\", feeData);\n          case 5:\n            // Compute the corrected baseFee to recompute the updated values\n            baseFee = feeData.maxFeePerGas - feeData.maxPriorityFeePerGas;\n            return _context2.abrupt(\"return\", {\n              gasPrice: feeData.gasPrice,\n              maxFeePerGas: baseFee + maxPriorityFeePerGas,\n              maxPriorityFeePerGas: maxPriorityFeePerGas\n            });\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x4, _x5, _x6) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n}\n// See: https://chainlist.org\nvar injected = false;\nfunction injectCommonNetworks() {\n  if (injected) {\n    return;\n  }\n  injected = true;\n  /// Register popular Ethereum networks\n  function registerEth(name, chainId, options) {\n    var func = function func() {\n      var network = new Network(name, chainId);\n      // We use 0 to disable ENS\n      if (options.ensNetwork != null) {\n        network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n      }\n      network.attachPlugin(new GasCostPlugin());\n      (options.plugins || []).forEach(function (plugin) {\n        network.attachPlugin(plugin);\n      });\n      return network;\n    };\n    // Register the network by name and chain ID\n    Network.register(name, func);\n    Network.register(chainId, func);\n    if (options.altNames) {\n      options.altNames.forEach(function (name) {\n        Network.register(name, func);\n      });\n    }\n  }\n  registerEth(\"mainnet\", 1, {\n    ensNetwork: 1,\n    altNames: [\"homestead\"]\n  });\n  registerEth(\"ropsten\", 3, {\n    ensNetwork: 3\n  });\n  registerEth(\"rinkeby\", 4, {\n    ensNetwork: 4\n  });\n  registerEth(\"goerli\", 5, {\n    ensNetwork: 5\n  });\n  registerEth(\"kovan\", 42, {\n    ensNetwork: 42\n  });\n  registerEth(\"sepolia\", 11155111, {});\n  registerEth(\"classic\", 61, {});\n  registerEth(\"classicKotti\", 6, {});\n  registerEth(\"arbitrum\", 42161, {\n    ensNetwork: 1\n  });\n  registerEth(\"arbitrum-goerli\", 421613, {});\n  registerEth(\"bnb\", 56, {\n    ensNetwork: 1\n  });\n  registerEth(\"bnbt\", 97, {});\n  registerEth(\"linea\", 59144, {\n    ensNetwork: 1\n  });\n  registerEth(\"linea-goerli\", 59140, {});\n  registerEth(\"matic\", 137, {\n    ensNetwork: 1,\n    plugins: [getGasStationPlugin(\"https:/\\/gasstation.polygon.technology/v2\")]\n  });\n  registerEth(\"matic-mumbai\", 80001, {\n    altNames: [\"maticMumbai\", \"maticmum\"],\n    plugins: [getGasStationPlugin(\"https:/\\/gasstation-testnet.polygon.technology/v2\")]\n  });\n  registerEth(\"optimism\", 10, {\n    ensNetwork: 1,\n    plugins: [getPriorityFeePlugin(BigInt(\"1000000\"))]\n  });\n  registerEth(\"optimism-goerli\", 420, {});\n  registerEth(\"xdai\", 100, {\n    ensNetwork: 1\n  });\n}","map":{"version":3,"names":["accessListify","getBigInt","assert","assertArgument","EnsPlugin","FetchUrlFeeDataNetworkPlugin","GasCostPlugin","Networks","Map","_name","WeakMap","_chainId","_plugins","Network","name","chainId","_classCallCheck","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","_createClass","key","toJSON","String","get","_classPrivateFieldGet","set","matches","other","error","Array","from","values","attachPlugin","plugin","Error","concat","clone","getPlugin","getPlugins","basename","plugins","filter","p","split","forEach","computeIntrinsicGas","tx","costs","gas","txBase","to","txCreate","data","i","length","substring","txDataZero","txDataNonzero","accessList","addr","txAccessListAddress","txAccessListStorageKey","storageKeys","network","injectCommonNetworks","BigInt","networkFunc","custom","ensAddress","ensNetwork","register","nameOrChainId","existing","JSON","stringify","parseUnits","_value","decimals","match","comps","push","frac","toString","getGasStationPlugin","url","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fetchFeeData","provider","request","response","_yield$Promise$all","_yield$Promise$all2","_response","_feeData","payload","feeData","wrap","_callee$","_context","prev","next","setHeader","Promise","all","send","sent","_slicedToArray","bodyJson","standard","gasPrice","maxFeePerGas","maxFee","maxPriorityFeePerGas","maxPriorityFee","abrupt","t0","stop","_x","_x2","_x3","apply","arguments","getPriorityFeePlugin","_ref2","_callee2","baseFee","_callee2$","_context2","_x4","_x5","_x6","injected","registerEth","options","func","altNames"],"sources":["C:\\Users\\prcue\\OneDrive\\Curso 4\\TFG GITT\\5. Desarrollo\\3. Frontend\\frontend_v3\\node_modules\\ethers\\src.ts\\providers\\network.ts"],"sourcesContent":["/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\n\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, assert, assertArgument } from \"../utils/index.js\";\n\nimport {\n    EnsPlugin, FetchUrlFeeDataNetworkPlugin, GasCostPlugin\n} from \"./plugins-network.js\";\n\nimport type { BigNumberish } from \"../utils/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type { NetworkPlugin } from \"./plugins-network.js\";\n\n\n/**\n *  A Networkish can be used to allude to a Network, by specifing:\n *  - a [[Network]] object\n *  - a well-known (or registered) network name\n *  - a well-known (or registered) chain ID\n *  - an object with sufficient details to describe a network\n */\nexport type Networkish = Network | number | bigint | string | {\n    name?: string,\n    chainId?: number,\n    //layerOneConnection?: Provider,\n    ensAddress?: string,\n    ensNetwork?: number\n};\n\n\n\n\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n\n\nconst Networks: Map<string | bigint, () => Network> = new Map();\n\n\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nexport class Network {\n    #name: string;\n    #chainId: bigint;\n\n    #plugins: Map<string, NetworkPlugin>;\n\n    /**\n     *  Creates a new **Network** for %%name%% and %%chainId%%.\n     */\n    constructor(name: string, chainId: BigNumberish) {\n        this.#name = name;\n        this.#chainId = getBigInt(chainId);\n        this.#plugins = new Map();\n    }\n\n    /**\n     *  Returns a JSON-compatible representation of a Network.\n     */\n    toJSON(): any {\n        return { name: this.name, chainId: String(this.chainId) };\n    }\n\n    /**\n     *  The network common name.\n     *\n     *  This is the canonical name, as networks migh have multiple\n     *  names.\n     */\n    get name(): string { return this.#name; }\n    set name(value: string) { this.#name =  value; }\n\n    /**\n     *  The network chain ID.\n     */\n    get chainId(): bigint { return this.#chainId; }\n    set chainId(value: BigNumberish) { this.#chainId = getBigInt(value, \"chainId\"); }\n\n    /**\n     *  Returns true if %%other%% matches this network. Any chain ID\n     *  must match, and if no chain ID is present, the name must match.\n     *\n     *  This method does not currently check for additional properties,\n     *  such as ENS address or plug-in compatibility.\n     */\n    matches(other: Networkish): boolean {\n        if (other == null) { return false; }\n\n        if (typeof(other) === \"string\") {\n            try {\n                return (this.chainId === getBigInt(other));\n            } catch (error) { }\n            return (this.name === other);\n        }\n\n        if (typeof(other) === \"number\" || typeof(other) === \"bigint\") {\n            try {\n                return (this.chainId === getBigInt(other));\n            } catch (error) { }\n            return false;\n        }\n\n        if (typeof(other) === \"object\") {\n            if (other.chainId != null) {\n                try {\n                    return (this.chainId === getBigInt(other.chainId));\n                } catch (error) { }\n                return false;\n            }\n            if (other.name != null) {\n                return (this.name === other.name);\n            }\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     *  Returns the list of plugins currently attached to this Network.\n     */\n    get plugins(): Array<NetworkPlugin> {\n        return Array.from(this.#plugins.values());\n    }\n\n    /**\n     *  Attach a new %%plugin%% to this Network. The network name\n     *  must be unique, excluding any fragment.\n     */\n    attachPlugin(plugin: NetworkPlugin): this {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${ plugin.name } `);\n        }\n        this.#plugins.set(plugin.name, plugin.clone());\n        return this;\n    }\n\n    /**\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\n     *  with fragments will not be returned unless %%name%% includes\n     *  a fragment.\n     */\n    getPlugin<T extends NetworkPlugin = NetworkPlugin>(name: string): null | T {\n        return <T>(this.#plugins.get(name)) || null;\n    }\n\n    /**\n     *  Gets a list of all plugins that match %%name%%, with otr without\n     *  a fragment.\n     */\n    getPlugins<T extends NetworkPlugin = NetworkPlugin>(basename: string): Array<T> {\n        return <Array<T>>(this.plugins.filter((p) => (p.name.split(\"#\")[0] === basename)));\n    }\n\n    /**\n     *  Create a copy of this Network.\n     */\n    clone(): Network {\n        const clone = new Network(this.name, this.chainId);\n        this.plugins.forEach((plugin) => {\n            clone.attachPlugin(plugin.clone());\n        });\n        return clone;\n    }\n\n    /**\n     *  Compute the intrinsic gas required for a transaction.\n     *\n     *  A GasCostPlugin can be attached to override the default\n     *  values.\n     */\n    computeIntrinsicGas(tx: TransactionLike): number {\n        const costs = this.getPlugin<GasCostPlugin>(\"org.ethers.plugins.network.GasCost\") || (new GasCostPlugin());\n\n        let gas = costs.txBase;\n        if (tx.to == null) { gas += costs.txCreate; }\n        if (tx.data) {\n            for (let i = 2; i < tx.data.length; i += 2) {\n                if (tx.data.substring(i, i + 2) === \"00\") {\n                    gas += costs.txDataZero;\n                } else {\n                    gas += costs.txDataNonzero;\n                }\n            }\n        }\n\n        if (tx.accessList) {\n            const accessList = accessListify(tx.accessList);\n            for (const addr in accessList) {\n                gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n            }\n        }\n\n        return gas;\n    }\n\n    /**\n     *  Returns a new Network for the %%network%% name or chainId.\n     */\n    static from(network?: Networkish): Network {\n        injectCommonNetworks();\n\n        // Default network\n        if (network == null) { return Network.from(\"mainnet\"); }\n\n        // Canonical name or chain ID\n        if (typeof(network) === \"number\") { network = BigInt(network); }\n        if (typeof(network) === \"string\" || typeof(network) === \"bigint\") {\n            const networkFunc = Networks.get(network);\n            if (networkFunc) { return networkFunc(); }\n            if (typeof(network) === \"bigint\") {\n                return new Network(\"unknown\", network);\n            }\n\n            assertArgument(false, \"unknown network\", \"network\", network);\n        }\n\n        // Clonable with network-like abilities\n        if (typeof((<Network>network).clone) === \"function\") {\n            const clone = (<Network>network).clone();\n            //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n            //}\n            return clone;\n        }\n\n        // Networkish\n        if (typeof(network) === \"object\") {\n            assertArgument(typeof(network.name) === \"string\" && typeof(network.chainId) === \"number\",\n                \"invalid network object name or chainId\", \"network\", network);\n\n            const custom = new Network(<string>(network.name), <number>(network.chainId));\n\n            if ((<any>network).ensAddress || (<any>network).ensNetwork != null) {\n                custom.attachPlugin(new EnsPlugin((<any>network).ensAddress, (<any>network).ensNetwork));\n            }\n\n            //if ((<any>network).layerOneConnection) {\n            //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n            //}\n\n            return custom;\n        }\n\n        assertArgument(false, \"invalid network\", \"network\", network);\n    }\n\n    /**\n     *  Register %%nameOrChainId%% with a function which returns\n     *  an instance of a Network representing that chain.\n     */\n    static register(nameOrChainId: string | number | bigint, networkFunc: () => Network): void {\n        if (typeof(nameOrChainId) === \"number\") { nameOrChainId = BigInt(nameOrChainId); }\n        const existing = Networks.get(nameOrChainId);\n        if (existing) {\n            assertArgument(false, `conflicting network for ${ JSON.stringify(existing.name) }`, \"nameOrChainId\", nameOrChainId);\n        }\n        Networks.set(nameOrChainId, networkFunc);\n    }\n}\n\n\ntype Options = {\n    ensNetwork?: number;\n    altNames?: Array<string>;\n    plugins?: Array<NetworkPlugin>;\n};\n\n// We don't want to bring in formatUnits because it is backed by\n// FixedNumber and we want to keep Networks tiny. The values\n// included by the Gas Stations are also IEEE 754 with lots of\n// rounding issues and exceed the strict checks formatUnits has.\nfunction parseUnits(_value: number | string, decimals: number): bigint {\n    const value = String(_value);\n    if (!value.match(/^[0-9.]+$/)) {\n        throw new Error(`invalid gwei value: ${ _value }`);\n    }\n\n    // Break into [ whole, fraction ]\n    const comps = value.split(\".\");\n    if (comps.length === 1) { comps.push(\"\"); }\n\n    // More than 1 decimal point or too many fractional positions\n    if (comps.length !== 2) {\n        throw new Error(`invalid gwei value: ${ _value }`);\n    }\n\n    // Pad the fraction to 9 decimalplaces\n    while (comps[1].length < decimals) { comps[1] += \"0\"; }\n\n    // Too many decimals and some non-zero ending, take the ceiling\n    if (comps[1].length > 9) {\n        let frac = BigInt(comps[1].substring(0, 9));\n        if (!comps[1].substring(9).match(/^0+$/)) { frac++; }\n        comps[1] = frac.toString();\n    }\n\n    return BigInt(comps[0] + comps[1]);\n}\n\n// Used by Polygon to use a gas station for fee data\nfunction getGasStationPlugin(url: string) {\n    return new FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {\n\n        // Prevent Cloudflare from blocking our request in node.js\n        request.setHeader(\"User-Agent\", \"ethers\");\n\n        let response;\n        try {\n            const [ _response, _feeData ] = await Promise.all([\n                request.send(), fetchFeeData()\n            ]);\n            response = _response;\n            const payload = response.bodyJson.standard;\n            const feeData = {\n                gasPrice: _feeData.gasPrice,\n                maxFeePerGas: parseUnits(payload.maxFee, 9),\n                maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9),\n            };\n            return feeData;\n        } catch (error: any) {\n            assert(false, `error encountered with polygon gas station (${ JSON.stringify(request.url) })`, \"SERVER_ERROR\", { request, response, error });\n        }\n    });\n}\n\n// Used by Optimism for a custom priority fee\nfunction getPriorityFeePlugin(maxPriorityFeePerGas: bigint) {\n    return new FetchUrlFeeDataNetworkPlugin(\"data:\", async (fetchFeeData, provider, request) => {\n        const feeData = await fetchFeeData();\n\n        // This should always fail\n        if (feeData.maxFeePerGas == null || feeData.maxPriorityFeePerGas == null) {\n            return feeData;\n        }\n\n        // Compute the corrected baseFee to recompute the updated values\n        const baseFee = feeData.maxFeePerGas - feeData.maxPriorityFeePerGas;\n        return {\n            gasPrice: feeData.gasPrice,\n            maxFeePerGas: (baseFee + maxPriorityFeePerGas),\n            maxPriorityFeePerGas\n        };\n    });\n}\n\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks(): void {\n    if (injected) { return; }\n    injected = true;\n\n    /// Register popular Ethereum networks\n    function registerEth(name: string, chainId: number, options: Options): void {\n        const func = function() {\n            const network = new Network(name, chainId);\n\n            // We use 0 to disable ENS\n            if (options.ensNetwork != null) {\n                network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n            }\n\n            network.attachPlugin(new GasCostPlugin());\n\n            (options.plugins || []).forEach((plugin) => {\n                network.attachPlugin(plugin);\n            });\n\n            return network;\n        };\n\n        // Register the network by name and chain ID\n        Network.register(name, func);\n        Network.register(chainId, func);\n\n        if (options.altNames) {\n            options.altNames.forEach((name) => {\n                Network.register(name, func);\n            });\n        }\n    }\n\n    registerEth(\"mainnet\", 1, { ensNetwork: 1, altNames: [ \"homestead\" ] });\n    registerEth(\"ropsten\", 3, { ensNetwork: 3 });\n    registerEth(\"rinkeby\", 4, { ensNetwork: 4 });\n    registerEth(\"goerli\", 5, { ensNetwork: 5 });\n    registerEth(\"kovan\", 42, { ensNetwork: 42 });\n    registerEth(\"sepolia\", 11155111, { });\n\n    registerEth(\"classic\", 61, { });\n    registerEth(\"classicKotti\", 6, { });\n\n\n\n    registerEth(\"arbitrum\", 42161, {\n        ensNetwork: 1,\n    });\n    registerEth(\"arbitrum-goerli\", 421613, { });\n\n    registerEth(\"bnb\", 56, { ensNetwork: 1 });\n    registerEth(\"bnbt\", 97, { });\n\n    registerEth(\"linea\", 59144, { ensNetwork: 1 });\n    registerEth(\"linea-goerli\", 59140, { });\n\n    registerEth(\"matic\", 137, {\n        ensNetwork: 1,\n        plugins: [\n            getGasStationPlugin(\"https:/\\/gasstation.polygon.technology/v2\")\n        ]\n    });\n    registerEth(\"matic-mumbai\", 80001, {\n        altNames: [ \"maticMumbai\", \"maticmum\" ],  // @TODO: Future remove these alts\n        plugins: [\n            getGasStationPlugin(\"https:/\\/gasstation-testnet.polygon.technology/v2\")\n        ]\n    });\n\n    registerEth(\"optimism\", 10, {\n        ensNetwork: 1,\n        plugins: [\n            getPriorityFeePlugin(BigInt(\"1000000\"))\n        ]\n    });\n    registerEth(\"optimism-goerli\", 420, { });\n\n    registerEth(\"xdai\", 100, { ensNetwork: 1 });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}